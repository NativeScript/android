println "Build.gradle running"

apply plugin: 'com.android.model.library'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle-experimental:0.7.0-beta3'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}



def ndkDebuggable = false;


List<String> runTasks = gradle.startParameter.getTaskNames();
for (String runTask : runTasks) {
    if (!ndkDebuggable && runTask.contains("Debug") && (runTask.contains("assemble") || runTask.contains("compile") || runTask.contains("generate"))) {
        println "DEBUG build DETECTED. Switching ndk debuggable to true"
        ndkDebuggable = true;
    }
}


model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.3"

        defaultConfig.with {
            minSdkVersion.apiLevel = 17
            targetSdkVersion.apiLevel = 22
        }

        lintOptions.with {
            abortOnError = false
        }
    }

    android.ndk {
        moduleName = "NativeScript"


        cppFlags.addAll(["-I${file("src/main/jni")}".toString(),
                         "-I${file("src/main/jni/include")}".toString()
        ])

        cppFlags.addAll(["-std=c++11", "-fexceptions", "-fno-builtin-stpcpy"])
        CFlags.addAll(["-Wno-error=format-security", "-g", "-fno-builtin-stpcpy"])

        ldLibs.addAll(["android", "dl", "log", "atomic", "z"])

        stl = "c++_static"

        abiFilters.addAll(["armeabi-v7a", "x86", "arm64-v8a"])
    }

    android.sources {
        main {
            java {
                source {
                    srcDirs 'src/main/java'
                }
            }

            jni {
                source {
                    srcDirs 'src/main/jni'
                }

                exportedHeaders {
                    srcDir "src/main/jni/include"
                }

                dependencies {
                    library "v8" linkage "static"
                }
            }
        }
    }

    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.txt'))

            ndk {
                debuggable = ndkDebuggable
            }

            setRuntimeCommit.dependsOn(setPackageVersion)

            tasks.whenTaskAdded { task ->
                if (task.getName() == "androidRelease") {
                    task.dependsOn(setRuntimeCommit)
                    task.mustRunAfter setRuntimeCommit
                    task.finalizedBy revertVersionFile
                }
            }
        }
    }

    android.abis {
        create("armeabi-v7a") {
            abiFilters.add("armeabi-v7a")

            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_base.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_libplatform.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_libbase.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libv8_nosnapshot.a")}".toString())
            ldLibs.add("${file("src/main/libs/armeabi-v7a/libzip.a")}".toString())
        }

        create("x86") {
            abiFilters.add("x86")

            ldLibs.add("${file("src/main/libs/x86/libv8_base.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libv8_libplatform.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libv8_libbase.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libv8_nosnapshot.a")}".toString())
            ldLibs.add("${file("src/main/libs/x86/libzip.a")}".toString())
        }

        create("arm64-v8a") {
            abiFilters.add("arm64-v8a")

            ldFlags.addAll([
                    "-L${file("src/main/libs/arm64-v8a")}".toString(),
                    "-lv8_base",
                    "-lv8_libplatform",
                    "-lv8_libbase",
                    "-lv8_nosnapshot",
                    "-lzip"
            ])

            //The correct way of setting these flags is not working hence the workaround above
            //ldFlags.add("-L ${file("src/main/libs/arm64-v8a")}" -l v8_base".toString())
            //ldFlags.add("-L ${file("src/main/libs/arm64-v8a")}" -l v8_libplatform".toString())
            //ldFlags.add("-L ${file("src/main/libs/arm64-v8a")}" -l v8_libbase".toString())
            //ldFlags.add("-L ${file("src/main/libs/arm64-v8a")}" -l v8_nosnapshot".toString())
            //ldFlags.add("-L ${file("src/main/libs/arm64-v8a")}" -l zip".toString())

            //ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_base.a")}".toString())
            //ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_libplatform.a")}".toString())
            //ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_libbase.a")}".toString())
            //ldLibs.add("${file("src/main/libs/arm64-v8a/libv8_nosnapshot.a")}".toString())
            //ldLibs.add("${file("src/main/libs/arm64-v8a/libzip.a")}".toString())
        }
    }

    repositories {
        prebuilt(PrebuiltLibraries) {
            v8 {
                headers.srcDir "src/main/jni/include"
                binaries.withType(StaticLibraryBinary) {
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_base.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_libplatform.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_libbase.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libv8_nosnapshot.a")
                    staticLibraryFile = file("src/main/libs/${targetPlatform.getName()}/libzip.a")
                }
            }
        }
    }
}

if (project.hasProperty("embedBindingGenerator")) {
    dependencies {
        compile fileTree(dir: (project(':binding-generator').buildDir.toString() + "/libs"), include: ['*.jar'])
    }
} else {
    dependencies {
        compile project(':binding-generator')
    }
}

task setPackageVersion {
    onlyIf {
        project.hasProperty('packageVersion')
    }

    doFirst {
        println "Setting runtime version: '${packageVersion}'"

        def versionFile = "$rootDir/src/main/jni//Version.h"
        String contents = new File(versionFile).getText("UTF-8")
        contents = contents.replaceAll(/0.0.0.0/, packageVersion)
        new File(versionFile).write(contents, "UTF-8")
    }
}

task setRuntimeCommit {
    onlyIf {
        project.hasProperty('gitCommitVersion')
    }

    doFirst {
        println "Setting runtime commit: '${gitCommitVersion}'"

        def versionFile = "$rootDir/src/main/jni//Version.h"
        String contents = new File(versionFile).getText("UTF-8")
        contents = contents.replaceAll(/RUNTIME_COMMIT_SHA_PLACEHOLDER/, gitCommitVersion)
        new File(versionFile).write(contents, "UTF-8")
    }
}

task revertVersionFile(type: Exec) {

    onlyIf {
        project.hasProperty('packageVersion') || project.hasProperty('gitCommitVersion')
    }

    doFirst {
        def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
        def versionFileName = "./src/main/jni//Version.h"
        def versionFilePath = new File(versionFileName).getAbsolutePath()
        println "Reverting Version.h file: ${versionFilePath}"

        if (isWinOs) {
            commandLine "cmd", "/c", "git", "checkout", "--", versionFilePath
        } else {
            commandLine "git", "checkout", "--", versionFilePath
        }
    }
}
