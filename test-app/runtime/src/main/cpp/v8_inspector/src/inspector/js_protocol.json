{
    "version": { "major": "1", "minor": "2" },
    "domains": [
        {
            "domain": "Schema",
            "description": "Provides information about the protocol schema.",
            "types": [
                {
                    "id": "Domain",
                    "type": "object",
                    "description": "Description of the protocol domain.",
                    "exported": true,
                    "properties": [
                        { "name": "name", "type": "string", "description": "Domain name." },
                        { "name": "version", "type": "string", "description": "Domain version." }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "getDomains",
                    "description": "Returns supported domains.",
                    "handlers": ["browser", "renderer"],
                    "returns": [
                        { "name": "domains", "type": "array", "items": { "$ref": "Domain" }, "description": "List of supported domains." }
                    ]
                }
            ]
        },
        {
            "domain": "Runtime",
            "description": "Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group.",
            "types": [
                {
                    "id": "ScriptId",
                    "type": "string",
                    "description": "Unique script identifier."
                },
                {
                    "id": "RemoteObjectId",
                    "type": "string",
                    "description": "Unique object identifier."
                },
                {
                    "id": "UnserializableValue",
                    "type": "string",
                    "enum": ["Infinity", "NaN", "-Infinity", "-0"],
                    "description": "Primitive value which cannot be JSON-stringified."
                },
                {
                    "id": "RemoteObject",
                    "type": "object",
                    "description": "Mirror object referencing original JavaScript object.",
                    "exported": true,
                    "properties": [
                        { "name": "type", "type": "string", "enum": ["object", "function", "undefined", "string", "number", "boolean", "symbol"], "description": "Object type." },
                        { "name": "subtype", "type": "string", "optional": true, "enum": ["array", "null", "node", "regexp", "date", "map", "set", "iterator", "generator", "error", "proxy", "promise", "typedarray"], "description": "Object subtype hint. Specified for <code>object</code> type values only." },
                        { "name": "className", "type": "string", "optional": true, "description": "Object class (constructor) name. Specified for <code>object</code> type values only." },
                        { "name": "value", "type": "any", "optional": true, "description": "Remote object value in case of primitive values or JSON values (if it was requested)." },
                        { "name": "unserializableValue", "$ref": "UnserializableValue", "optional": true, "description": "Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property." },
                        { "name": "description", "type": "string", "optional": true, "description": "String representation of the object." },
                        { "name": "objectId", "$ref": "RemoteObjectId", "optional": true, "description": "Unique object identifier (for non-primitive values)." },
                        { "name": "preview", "$ref": "ObjectPreview", "optional": true, "description": "Preview containing abbreviated property values. Specified for <code>object</code> type values only.", "experimental": true },
                        { "name": "customPreview", "$ref": "CustomPreview", "optional": true, "experimental": true}
                    ]
                },
                {
                    "id": "CustomPreview",
                    "type": "object",
                    "experimental": true,
                    "properties": [
                        { "name": "header", "type": "string"},
                        { "name": "hasBody", "type": "boolean"},
                        { "name": "formatterObjectId", "$ref": "RemoteObjectId"},
                        { "name": "bindRemoteObjectFunctionId", "$ref": "RemoteObjectId" },
                        { "name": "configObjectId", "$ref": "RemoteObjectId", "optional": true }
                    ]
                },
                {
                    "id": "ObjectPreview",
                    "type": "object",
                    "experimental": true,
                    "description": "Object containing abbreviated remote object value.",
                    "properties": [
                        { "name": "type", "type": "string", "enum": ["object", "function", "undefined", "string", "number", "boolean", "symbol"], "description": "Object type." },
                        { "name": "subtype", "type": "string", "optional": true, "enum": ["array", "null", "node", "regexp", "date", "map", "set", "iterator", "generator", "error"], "description": "Object subtype hint. Specified for <code>object</code> type values only." },
                        { "name": "description", "type": "string", "optional": true, "description": "String representation of the object." },
                        { "name": "overflow", "type": "boolean", "description": "True iff some of the properties or entries of the original object did not fit." },
                        { "name": "properties", "type": "array", "items": { "$ref": "PropertyPreview" }, "description": "List of the properties." },
                        { "name": "entries", "type": "array", "items": { "$ref": "EntryPreview" }, "optional": true, "description": "List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only." }
                    ]
                },
                {
                    "id": "PropertyPreview",
                    "type": "object",
                    "experimental": true,
                    "properties": [
                        { "name": "name", "type": "string", "description": "Property name." },
                        { "name": "type", "type": "string", "enum": ["object", "function", "undefined", "string", "number", "boolean", "symbol", "accessor"], "description": "Object type. Accessor means that the property itself is an accessor property." },
                        { "name": "value", "type": "string", "optional": true, "description": "User-friendly property value string." },
                        { "name": "valuePreview", "$ref": "ObjectPreview", "optional": true, "description": "Nested value preview." },
                        { "name": "subtype", "type": "string", "optional": true, "enum": ["array", "null", "node", "regexp", "date", "map", "set", "iterator", "generator", "error"], "description": "Object subtype hint. Specified for <code>object</code> type values only." }
                    ]
                },
                {
                    "id": "EntryPreview",
                    "type": "object",
                    "experimental": true,
                    "properties": [
                        { "name": "key", "$ref": "ObjectPreview", "optional": true, "description": "Preview of the key. Specified for map-like collection entries." },
                        { "name": "value", "$ref": "ObjectPreview", "description": "Preview of the value." }
                    ]
                },
                {
                    "id": "PropertyDescriptor",
                    "type": "object",
                    "description": "Object property descriptor.",
                    "properties": [
                        { "name": "name", "type": "string", "description": "Property name or symbol description." },
                        { "name": "value", "$ref": "RemoteObject", "optional": true, "description": "The value associated with the property." },
                        { "name": "writable", "type": "boolean", "optional": true, "description": "True if the value associated with the property may be changed (data descriptors only)." },
                        { "name": "get", "$ref": "RemoteObject", "optional": true, "description": "A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only)." },
                        { "name": "set", "$ref": "RemoteObject", "optional": true, "description": "A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only)." },
                        { "name": "configurable", "type": "boolean", "description": "True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object." },
                        { "name": "enumerable", "type": "boolean", "description": "True if this property shows up during enumeration of the properties on the corresponding object." },
                        { "name": "wasThrown", "type": "boolean", "optional": true, "description": "True if the result was thrown during the evaluation." },
                        { "name": "isOwn", "optional": true, "type": "boolean", "description": "True if the property is owned for the object." },
                        { "name": "symbol", "$ref": "RemoteObject", "optional": true, "description": "Property symbol object, if the property is of the <code>symbol</code> type." }
                    ]
                },
                {
                    "id": "InternalPropertyDescriptor",
                    "type": "object",
                    "description": "Object internal property descriptor. This property isn't normally visible in JavaScript code.",
                    "properties": [
                        { "name": "name", "type": "string", "description": "Conventional property name." },
                        { "name": "value", "$ref": "RemoteObject", "optional": true, "description": "The value associated with the property." }
                    ]
                },
                {
                    "id": "CallArgument",
                    "type": "object",
                    "description": "Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified.",
                    "properties": [
                        { "name": "value", "type": "any", "optional": true, "description": "Primitive value." },
                        { "name": "unserializableValue", "$ref": "UnserializableValue", "optional": true, "description": "Primitive value which can not be JSON-stringified." },
                        { "name": "objectId", "$ref": "RemoteObjectId", "optional": true, "description": "Remote object handle." }
                    ]
                },
                {
                    "id": "ExecutionContextId",
                    "type": "integer",
                    "description": "Id of an execution context."
                },
                {
                    "id": "ExecutionContextDescription",
                    "type": "object",
                    "description": "Description of an isolated world.",
                    "properties": [
                        { "name": "id", "$ref": "ExecutionContextId", "description": "Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed." },
                        { "name": "origin", "type": "string", "description": "Execution context origin." },
                        { "name": "name", "type": "string", "description": "Human readable name describing given context." },
                        { "name": "auxData", "type": "object", "optional": true, "description": "Embedder-specific auxiliary data." }
                    ]
                },
                {
                    "id": "ExceptionDetails",
                    "type": "object",
                    "description": "Detailed information about exception (or error) that was thrown during script compilation or execution.",
                    "properties": [
                        { "name": "exceptionId", "type": "integer", "description": "Exception id." },
                        { "name": "text", "type": "string", "description": "Exception text, which should be used together with exception object when available." },
                        { "name": "lineNumber", "type": "integer", "description": "Line number of the exception location (0-based)." },
                        { "name": "columnNumber", "type": "integer", "description": "Column number of the exception location (0-based)." },
                        { "name": "scriptId", "$ref": "ScriptId", "optional": true, "description": "Script ID of the exception location." },
                        { "name": "url", "type": "string", "optional": true, "description": "URL of the exception location, to be used when the script was not reported." },
                        { "name": "stackTrace", "$ref": "StackTrace", "optional": true, "description": "JavaScript stack trace if available." },
                        { "name": "exception", "$ref": "RemoteObject", "optional": true, "description": "Exception object if available." },
                        { "name": "executionContextId", "$ref": "ExecutionContextId", "optional": true, "description": "Identifier of the context where exception happened." }
                    ]
                },
                {
                    "id": "Timestamp",
                    "type": "number",
                    "description": "Number of milliseconds since epoch."
                },
                {
                    "id": "CallFrame",
                    "type": "object",
                    "description": "Stack entry for runtime errors and assertions.",
                    "properties": [
                        { "name": "functionName", "type": "string", "description": "JavaScript function name." },
                        { "name": "scriptId", "$ref": "ScriptId", "description": "JavaScript script id." },
                        { "name": "url", "type": "string", "description": "JavaScript script name or url." },
                        { "name": "lineNumber", "type": "integer", "description": "JavaScript script line number (0-based)." },
                        { "name": "columnNumber", "type": "integer", "description": "JavaScript script column number (0-based)." }
                    ]
                },
                {
                    "id": "StackTrace",
                    "type": "object",
                    "description": "Call frames for assertions or error messages.",
                    "exported": true,
                    "properties": [
                        { "name": "description", "type": "string", "optional": true, "description": "String label of this stack trace. For async traces this may be a name of the function that initiated the async call." },
                        { "name": "callFrames", "type": "array", "items": { "$ref": "CallFrame" }, "description": "JavaScript function name." },
                        { "name": "parent", "$ref": "StackTrace", "optional": true, "description": "Asynchronous JavaScript stack trace that preceded this stack, if available." }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "evaluate",
                    "async": true,
                    "parameters": [
                        { "name": "expression", "type": "string", "description": "Expression to evaluate." },
                        { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." },
                        { "name": "includeCommandLineAPI", "type": "boolean", "optional": true, "description": "Determines whether Command Line API should be available during the evaluation." },
                        { "name": "silent", "type": "boolean", "optional": true, "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state." },
                        { "name": "contextId", "$ref": "ExecutionContextId", "optional": true, "description": "Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page." },
                        { "name": "returnByValue", "type": "boolean", "optional": true, "description": "Whether the result is expected to be a JSON object that should be sent by value." },
                        { "name": "generatePreview", "type": "boolean", "optional": true, "experimental": true, "description": "Whether preview should be generated for the result." },
                        { "name": "userGesture", "type": "boolean", "optional": true, "experimental": true, "description": "Whether execution should be treated as initiated by user in the UI." },
                        { "name": "awaitPromise", "type": "boolean", "optional":true, "description": "Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error." }
                    ],
                    "returns": [
                        { "name": "result", "$ref": "RemoteObject", "description": "Evaluation result." },
                        { "name": "exceptionDetails", "$ref": "ExceptionDetails", "optional": true, "description": "Exception details."}
                    ],
                    "description": "Evaluates expression on global object."
                },
                {
                    "name": "awaitPromise",
                    "async": true,
                    "parameters": [
                        { "name": "promiseObjectId", "$ref": "RemoteObjectId", "description": "Identifier of the promise." },
                        { "name": "returnByValue", "type": "boolean", "optional": true, "description": "Whether the result is expected to be a JSON object that should be sent by value." },
                        { "name": "generatePreview", "type": "boolean", "optional": true, "description": "Whether preview should be generated for the result." }
                    ],
                    "returns": [
                        { "name": "result", "$ref": "RemoteObject", "description": "Promise result. Will contain rejected value if promise was rejected." },
                        { "name": "exceptionDetails", "$ref": "ExceptionDetails", "optional": true, "description": "Exception details if stack strace is available."}
                    ],
                    "description": "Add handler to promise with given promise object id."
                },
                {
                    "name": "callFunctionOn",
                    "async": true,
                    "parameters": [
                        { "name": "objectId", "$ref": "RemoteObjectId", "description": "Identifier of the object to call function on." },
                        { "name": "functionDeclaration", "type": "string", "description": "Declaration of the function to call." },
                        { "name": "arguments", "type": "array", "items": { "$ref": "CallArgument", "description": "Call argument." }, "optional": true, "description": "Call arguments. All call arguments must belong to the same JavaScript world as the target object." },
                        { "name": "silent", "type": "boolean", "optional": true, "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state." },
                        { "name": "returnByValue", "type": "boolean", "optional": true, "description": "Whether the result is expected to be a JSON object which should be sent by value." },
                        { "name": "generatePreview", "type": "boolean", "optional": true, "experimental": true, "description": "Whether preview should be generated for the result." },
                        { "name": "userGesture", "type": "boolean", "optional": true, "experimental": true, "description": "Whether execution should be treated as initiated by user in the UI." },
                        { "name": "awaitPromise", "type": "boolean", "optional":true, "description": "Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error." }
                    ],
                    "returns": [
                        { "name": "result", "$ref": "RemoteObject", "description": "Call result." },
                        { "name": "exceptionDetails", "$ref": "ExceptionDetails", "optional": true, "description": "Exception details."}
                    ],
                    "description": "Calls function with given declaration on the given object. Object group of the result is inherited from the target object."
                },
                {
                    "name": "getProperties",
                    "parameters": [
                        { "name": "objectId", "$ref": "RemoteObjectId", "description": "Identifier of the object to return properties for." },
                        { "name": "ownProperties", "optional": true, "type": "boolean", "description": "If true, returns properties belonging only to the element itself, not to its prototype chain." },
                        { "name": "accessorPropertiesOnly", "optional": true, "type": "boolean", "description": "If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.", "experimental": true },
                        { "name": "generatePreview", "type": "boolean", "optional": true, "experimental": true, "description": "Whether preview should be generated for the results." }
                    ],
                    "returns": [
                        { "name": "result", "type": "array", "items": { "$ref": "PropertyDescriptor" }, "description": "Object properties." },
                        { "name": "internalProperties", "optional": true, "type": "array", "items": { "$ref": "InternalPropertyDescriptor" }, "description": "Internal object properties (only of the element itself)." },
                        { "name": "exceptionDetails", "$ref": "ExceptionDetails", "optional": true, "description": "Exception details."}
                    ],
                    "description": "Returns properties of a given object. Object group of the result is inherited from the target object."
                },
                {
                    "name": "releaseObject",
                    "parameters": [
                        { "name": "objectId", "$ref": "RemoteObjectId", "description": "Identifier of the object to release." }
                    ],
                    "description": "Releases remote object with given id."
                },
                {
                    "name": "releaseObjectGroup",
                    "parameters": [
                        { "name": "objectGroup", "type": "string", "description": "Symbolic object group name." }
                    ],
                    "description": "Releases all remote objects that belong to a given group."
                },
                {
                    "name": "runIfWaitingForDebugger",
                    "description": "Tells inspected instance to run if it was waiting for debugger to attach."
                },
                {
                    "name": "enable",
                    "description": "Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context."
                },
                {
                    "name": "disable",
                    "description": "Disables reporting of execution contexts creation."
                },
                {
                    "name": "discardConsoleEntries",
                    "description": "Discards collected exceptions and console API calls."
                },
                {
                    "name": "setCustomObjectFormatterEnabled",
                    "parameters": [
                        {
                            "name": "enabled",
                            "type": "boolean"
                        }
                    ],
                    "experimental": true
                },
                {
                    "name": "compileScript",
                    "parameters": [
                        { "name": "expression", "type": "string", "description": "Expression to compile." },
                        { "name": "sourceURL", "type": "string", "description": "Source url to be set for the script." },
                        { "name": "persistScript", "type": "boolean", "description": "Specifies whether the compiled script should be persisted." },
                        { "name": "executionContextId", "$ref": "ExecutionContextId", "optional": true, "description": "Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page." }
                    ],
                    "returns": [
                        { "name": "scriptId", "$ref": "ScriptId", "optional": true, "description": "Id of the script." },
                        { "name": "exceptionDetails", "$ref": "ExceptionDetails", "optional": true, "description": "Exception details."}
                    ],
                    "description": "Compiles expression."
                },
                {
                    "name": "runScript",
                    "async": true,
                    "parameters": [
                        { "name": "scriptId", "$ref": "ScriptId", "description": "Id of the script to run." },
                        { "name": "executionContextId", "$ref": "ExecutionContextId", "optional": true, "description": "Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page." },
                        { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." },
                        { "name": "silent", "type": "boolean", "optional": true, "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state." },
                        { "name": "includeCommandLineAPI", "type": "boolean", "optional": true, "description": "Determines whether Command Line API should be available during the evaluation." },
                        { "name": "returnByValue", "type": "boolean", "optional": true, "description": "Whether the result is expected to be a JSON object which should be sent by value." },
                        { "name": "generatePreview", "type": "boolean", "optional": true, "description": "Whether preview should be generated for the result." },
                        { "name": "awaitPromise", "type": "boolean", "optional": true, "description": "Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error." }
                    ],
                    "returns": [
                        { "name": "result", "$ref": "RemoteObject", "description": "Run result." },
                        { "name": "exceptionDetails", "$ref": "ExceptionDetails", "optional": true, "description": "Exception details."}
                    ],
                    "description": "Runs script with given id in a given context."
                }
            ],
            "events": [
                {
                    "name": "executionContextCreated",
                    "parameters": [
                        { "name": "context", "$ref": "ExecutionContextDescription", "description": "A newly created execution contex." }
                    ],
                    "description": "Issued when new execution context is created."
                },
                {
                    "name": "executionContextDestroyed",
                    "parameters": [
                        { "name": "executionContextId", "$ref": "ExecutionContextId", "description": "Id of the destroyed context" }
                    ],
                    "description": "Issued when execution context is destroyed."
                },
                {
                    "name": "executionContextsCleared",
                    "description": "Issued when all executionContexts were cleared in browser"
                },
                {
                    "name": "exceptionThrown",
                    "description": "Issued when exception was thrown and unhandled.",
                    "parameters": [
                        { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp of the exception." },
                        { "name": "exceptionDetails", "$ref": "ExceptionDetails" }
                    ]
                },
                {
                    "name": "exceptionRevoked",
                    "description": "Issued when unhandled exception was revoked.",
                    "parameters": [
                        { "name": "reason", "type": "string", "description": "Reason describing why exception was revoked." },
                        { "name": "exceptionId", "type": "integer", "description": "The id of revoked exception, as reported in <code>exceptionUnhandled</code>." }
                    ]
                },
                {
                    "name": "consoleAPICalled",
                    "description": "Issued when console API was called.",
                    "parameters": [
                        { "name": "type", "type": "string", "enum": ["log", "debug", "info", "error", "warning", "dir", "dirxml", "table", "trace", "clear", "startGroup", "startGroupCollapsed", "endGroup", "assert", "profile", "profileEnd"], "description": "Type of the call." },
                        { "name": "args", "type": "array", "items": { "$ref": "RemoteObject" }, "description": "Call arguments." },
                        { "name": "executionContextId", "$ref": "ExecutionContextId", "description": "Identifier of the context where the call was made." },
                        { "name": "timestamp", "$ref": "Timestamp", "description": "Call timestamp." },
                        { "name": "stackTrace", "$ref": "StackTrace", "optional": true, "description": "Stack trace captured when the call was made." }
                    ]
                },
                {
                    "name": "inspectRequested",
                    "description": "Issued when object should be inspected (for example, as a result of inspect() command line API call).",
                    "parameters": [
                        { "name": "object", "$ref": "RemoteObject" },
                        { "name": "hints", "type": "object" }
                    ]
                }
            ]
        },
        {
            "domain": "Debugger",
            "description": "Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc.",
            "dependencies": ["Runtime"],
            "types": [
                {
                    "id": "BreakpointId",
                    "type": "string",
                    "description": "Breakpoint identifier."
                },
                {
                    "id": "CallFrameId",
                    "type": "string",
                    "description": "Call frame identifier."
                },
                {
                    "id": "Location",
                    "type": "object",
                    "properties": [
                        { "name": "scriptId", "$ref": "Runtime.ScriptId", "description": "Script identifier as reported in the <code>Debugger.scriptParsed</code>." },
                        { "name": "lineNumber", "type": "integer", "description": "Line number in the script (0-based)." },
                        { "name": "columnNumber", "type": "integer", "optional": true, "description": "Column number in the script (0-based)." }
                    ],
                    "description": "Location in the source code."
                },
                {
                    "id": "ScriptPosition",
                    "experimental": true,
                    "type": "object",
                    "properties": [
                        { "name": "lineNumber", "type": "integer" },
                        { "name": "columnNumber", "type": "integer" }
                    ],
                    "description": "Location in the source code."
                },
                {
                    "id": "CallFrame",
                    "type": "object",
                    "properties": [
                        { "name": "callFrameId", "$ref": "CallFrameId", "description": "Call frame identifier. This identifier is only valid while the virtual machine is paused." },
                        { "name": "functionName", "type": "string", "description": "Name of the JavaScript function called on this call frame." },
                        { "name": "functionLocation", "$ref": "Location", "optional": true, "experimental": true, "description": "Location in the source code." },
                        { "name": "location", "$ref": "Location", "description": "Location in the source code." },
                        { "name": "scopeChain", "type": "array", "items": { "$ref": "Scope" }, "description": "Scope chain for this call frame." },
                        { "name": "this", "$ref": "Runtime.RemoteObject", "description": "<code>this</code> object for this call frame." },
                        { "name": "returnValue", "$ref": "Runtime.RemoteObject", "optional": true, "description": "The value being returned, if the function is at return point." }
                    ],
                    "description": "JavaScript call frame. Array of call frames form the call stack."
                },
                {
                    "id": "Scope",
                    "type": "object",
                    "properties": [
                        { "name": "type", "type": "string", "enum": ["global", "local", "with", "closure", "catch", "block", "script"], "description": "Scope type." },
                        { "name": "object", "$ref": "Runtime.RemoteObject", "description": "Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties." },
                        { "name": "name", "type": "string", "optional": true },
                        { "name": "startLocation", "$ref": "Location", "optional": true, "description": "Location in the source code where scope starts" },
                        { "name": "endLocation", "$ref": "Location", "optional": true, "description": "Location in the source code where scope ends" }
                    ],
                    "description": "Scope description."
                },
                {
                    "id": "SearchMatch",
                    "type": "object",
                    "description": "Search match for resource.",
                    "exported": true,
                    "properties": [
                        { "name": "lineNumber", "type": "number", "description": "Line number in resource content." },
                        { "name": "lineContent", "type": "string", "description": "Line with match content." }
                    ],
                    "experimental": true
                }
            ],
            "commands": [
                {
                    "name": "enable",
                    "description": "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."
                },
                {
                    "name": "disable",
                    "description": "Disables debugger for given page."
                },
                {
                    "name": "setBreakpointsActive",
                    "parameters": [
                        { "name": "active", "type": "boolean", "description": "New value for breakpoints active state." }
                    ],
                    "description": "Activates / deactivates all breakpoints on the page."
                },
                {
                    "name": "setSkipAllPauses",
                    "parameters": [
                        { "name": "skip", "type": "boolean", "description": "New value for skip pauses state." }
                    ],
                    "description": "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."
                },
                {
                    "name": "setBreakpointByUrl",
                    "parameters": [
                        { "name": "lineNumber", "type": "integer", "description": "Line number to set breakpoint at." },
                        { "name": "url", "type": "string", "optional": true, "description": "URL of the resources to set breakpoint on." },
                        { "name": "urlRegex", "type": "string", "optional": true, "description": "Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified." },
                        { "name": "columnNumber", "type": "integer", "optional": true, "description": "Offset in the line to set breakpoint at." },
                        { "name": "condition", "type": "string", "optional": true, "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true." }
                    ],
                    "returns": [
                        { "name": "breakpointId", "$ref": "BreakpointId", "description": "Id of the created breakpoint for further reference." },
                        { "name": "locations", "type": "array", "items": { "$ref": "Location" }, "description": "List of the locations this breakpoint resolved into upon addition." }
                    ],
                    "description": "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."
                },
                {
                    "name": "setBreakpoint",
                    "parameters": [
                        { "name": "location", "$ref": "Location", "description": "Location to set breakpoint in." },
                        { "name": "condition", "type": "string", "optional": true, "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true." }
                    ],
                    "returns": [
                        { "name": "breakpointId", "$ref": "BreakpointId", "description": "Id of the created breakpoint for further reference." },
                        { "name": "actualLocation", "$ref": "Location", "description": "Location this breakpoint resolved into." }
                    ],
                    "description": "Sets JavaScript breakpoint at a given location."
                },
                {
                    "name": "removeBreakpoint",
                    "parameters": [
                        { "name": "breakpointId", "$ref": "BreakpointId" }
                    ],
                    "description": "Removes JavaScript breakpoint."
                },
                {
                    "name": "continueToLocation",
                    "parameters": [
                        { "name": "location", "$ref": "Location", "description": "Location to continue to." }
                    ],
                    "description": "Continues execution until specific location is reached."
                },
                {
                    "name": "stepOver",
                    "description": "Steps over the statement."
                },
                {
                    "name": "stepInto",
                    "description": "Steps into the function call."
                },
                {
                    "name": "stepOut",
                    "description": "Steps out of the function call."
                },
                {
                    "name": "pause",
                    "description": "Stops on the next JavaScript statement."
                },
                {
                    "name": "resume",
                    "description": "Resumes JavaScript execution."
                },
                {
                    "name": "searchInContent",
                    "parameters": [
                        { "name": "scriptId", "$ref": "Runtime.ScriptId", "description": "Id of the script to search in." },
                        { "name": "query", "type": "string", "description": "String to search for."  },
                        { "name": "caseSensitive", "type": "boolean", "optional": true, "description": "If true, search is case sensitive." },
                        { "name": "isRegex", "type": "boolean", "optional": true, "description": "If true, treats string parameter as regex." }
                    ],
                    "returns": [
                        { "name": "result", "type": "array", "items": { "$ref": "SearchMatch" }, "description": "List of search matches." }
                    ],
                    "experimental": true,
                    "description": "Searches for given string in script content."
                },
                {
                    "name": "setScriptSource",
                    "parameters": [
                        { "name": "scriptId", "$ref": "Runtime.ScriptId", "description": "Id of the script to edit." },
                        { "name": "scriptSource", "type": "string", "description": "New content of the script." },
                        { "name": "dryRun", "type": "boolean", "optional": true, "description": " If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code." }
                    ],
                    "returns": [
                        { "name": "callFrames", "type": "array", "optional": true, "items": { "$ref": "CallFrame" }, "description": "New stack trace in case editing has happened while VM was stopped." },
                        { "name": "stackChanged", "type": "boolean", "optional": true, "description": "Whether current call stack  was modified after applying the changes." },
                        { "name": "asyncStackTrace", "$ref": "Runtime.StackTrace", "optional": true, "description": "Async stack trace, if any." },
                        { "name": "exceptionDetails", "optional": true, "$ref": "Runtime.ExceptionDetails", "description": "Exception details if any." }
                    ],
                    "description": "Edits JavaScript source live."
                },
                {
                    "name": "restartFrame",
                    "parameters": [
                        { "name": "callFrameId", "$ref": "CallFrameId", "description": "Call frame identifier to evaluate on." }
                    ],
                    "returns": [
                        { "name": "callFrames", "type": "array", "items": { "$ref": "CallFrame" }, "description": "New stack trace." },
                        { "name": "asyncStackTrace", "$ref": "Runtime.StackTrace", "optional": true, "description": "Async stack trace, if any." }
                    ],
                    "description": "Restarts particular call frame from the beginning."
                },
                {
                    "name": "getScriptSource",
                    "parameters": [
                        { "name": "scriptId", "$ref": "Runtime.ScriptId", "description": "Id of the script to get source for." }
                    ],
                    "returns": [
                        { "name": "scriptSource", "type": "string", "description": "Script source." }
                    ],
                    "description": "Returns source for the script with given id."
                },
                {
                    "name": "setPauseOnExceptions",
                    "parameters": [
                        { "name": "state", "type": "string", "enum": ["none", "uncaught", "all"], "description": "Pause on exceptions mode." }
                    ],
                    "description": "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."
                },
                {
                    "name": "evaluateOnCallFrame",
                    "parameters": [
                        { "name": "callFrameId", "$ref": "CallFrameId", "description": "Call frame identifier to evaluate on." },
                        { "name": "expression", "type": "string", "description": "Expression to evaluate." },
                        { "name": "objectGroup", "type": "string", "optional": true, "description": "String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>)." },
                        { "name": "includeCommandLineAPI", "type": "boolean", "optional": true, "description": "Specifies whether command line API should be available to the evaluated expression, defaults to false." },
                        { "name": "silent", "type": "boolean", "optional": true, "description": "In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state." },
                        { "name": "returnByValue", "type": "boolean", "optional": true, "description": "Whether the result is expected to be a JSON object that should be sent by value." },
                        { "name": "generatePreview", "type": "boolean", "optional": true, "experimental": true, "description": "Whether preview should be generated for the result." }
                    ],
                    "returns": [
                        { "name": "result", "$ref": "Runtime.RemoteObject", "description": "Object wrapper for the evaluation result." },
                        { "name": "exceptionDetails", "$ref": "Runtime.ExceptionDetails", "optional": true, "description": "Exception details."}
                    ],
                    "description": "Evaluates expression on a given call frame."
                },
                {
                    "name": "setVariableValue",
                    "parameters": [
                        { "name": "scopeNumber", "type": "integer", "description": "0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually." },
                        { "name": "variableName", "type": "string", "description": "Variable name." },
                        { "name": "newValue", "$ref": "Runtime.CallArgument", "description": "New variable value." },
                        { "name": "callFrameId", "$ref": "CallFrameId", "description": "Id of callframe that holds variable." }
                    ],
                    "description": "Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually."
                },
                {
                    "name": "setAsyncCallStackDepth",
                    "parameters": [
                        { "name": "maxDepth", "type": "integer", "description": "Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default)." }
                    ],
                    "description": "Enables or disables async call stacks tracking."
                },
                {
                    "name": "setBlackboxPatterns",
                    "parameters": [
                        { "name": "patterns", "type": "array", "items": { "type": "string" }, "description": "Array of regexps that will be used to check script url for blackbox state." }
                    ],
                    "experimental": true,
                    "description": "Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."
                },
                {
                    "name": "setBlackboxedRanges",
                    "parameters": [
                        { "name": "scriptId", "$ref": "Runtime.ScriptId", "description": "Id of the script." },
                        { "name": "positions", "type": "array", "items": { "$ref": "ScriptPosition" } }
                    ],
                    "experimental": true,
                    "description": "Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted."
                }
            ],
            "events": [
                {
                    "name": "scriptParsed",
                    "parameters": [
                        { "name": "scriptId", "$ref": "Runtime.ScriptId", "description": "Identifier of the script parsed." },
                        { "name": "url", "type": "string", "description": "URL or name of the script parsed (if any)." },
                        { "name": "startLine", "type": "integer", "description": "Line offset of the script within the resource with given URL (for script tags)." },
                        { "name": "startColumn", "type": "integer", "description": "Column offset of the script within the resource with given URL." },
                        { "name": "endLine", "type": "integer", "description": "Last line of the script." },
                        { "name": "endColumn", "type": "integer", "description": "Length of the last line of the script." },
                        { "name": "executionContextId", "$ref": "Runtime.ExecutionContextId", "description": "Specifies script creation context." },
                        { "name": "hash", "type": "string", "description": "Content hash of the script."},
                        { "name": "executionContextAuxData", "type": "object", "optional": true, "description": "Embedder-specific auxiliary data." },
                        { "name": "isLiveEdit", "type": "boolean", "optional": true, "description": "True, if this script is generated as a result of the live edit operation.", "experimental": true },
                        { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with script (if any)." },
                        { "name": "hasSourceURL", "type": "boolean", "optional": true, "description": "True, if this script has sourceURL.", "experimental": true }
                    ],
                    "description": "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."
                },
                {
                    "name": "scriptFailedToParse",
                    "parameters": [
                        { "name": "scriptId", "$ref": "Runtime.ScriptId", "description": "Identifier of the script parsed." },
                        { "name": "url", "type": "string", "description": "URL or name of the script parsed (if any)." },
                        { "name": "startLine", "type": "integer", "description": "Line offset of the script within the resource with given URL (for script tags)." },
                        { "name": "startColumn", "type": "integer", "description": "Column offset of the script within the resource with given URL." },
                        { "name": "endLine", "type": "integer", "description": "Last line of the script." },
                        { "name": "endColumn", "type": "integer", "description": "Length of the last line of the script." },
                        { "name": "executionContextId", "$ref": "Runtime.ExecutionContextId", "description": "Specifies script creation context." },
                        { "name": "hash", "type": "string", "description": "Content hash of the script."},
                        { "name": "executionContextAuxData", "type": "object", "optional": true, "description": "Embedder-specific auxiliary data." },
                        { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with script (if any)." },
                        { "name": "hasSourceURL", "type": "boolean", "optional": true, "description": "True, if this script has sourceURL.", "experimental": true }
                    ],
                    "description": "Fired when virtual machine fails to parse the script."
                },
                {
                    "name": "breakpointResolved",
                    "parameters": [
                        { "name": "breakpointId", "$ref": "BreakpointId", "description": "Breakpoint unique identifier." },
                        { "name": "location", "$ref": "Location", "description": "Actual breakpoint location." }
                    ],
                    "description": "Fired when breakpoint is resolved to an actual script and location."
                },
                {
                    "name": "paused",
                    "parameters": [
                        { "name": "callFrames", "type": "array", "items": { "$ref": "CallFrame" }, "description": "Call stack the virtual machine stopped on." },
                        { "name": "reason", "type": "string", "enum": [ "XHR", "DOM", "EventListener", "exception", "assert", "debugCommand", "promiseRejection", "other" ], "description": "Pause reason.", "exported": true },
                        { "name": "data", "type": "object", "optional": true, "description": "Object containing break-specific auxiliary properties." },
                        { "name": "hitBreakpoints", "type": "array", "optional": true, "items": { "type": "string" }, "description": "Hit breakpoints IDs" },
                        { "name": "asyncStackTrace", "$ref": "Runtime.StackTrace", "optional": true, "description": "Async stack trace, if any." }
                    ],
                    "description": "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."
                },
                {
                    "name": "resumed",
                    "description": "Fired when the virtual machine resumed execution."
                }
            ]
        },
        {
            "domain": "Console",
            "description": "This domain is deprecated - use Runtime or Log instead.",
            "dependencies": ["Runtime"],
            "deprecated": true,
            "types": [
                {
                    "id": "ConsoleMessage",
                    "type": "object",
                    "description": "Console message.",
                    "properties": [
                        { "name": "source", "type": "string", "enum": ["xml", "javascript", "network", "console-api", "storage", "appcache", "rendering", "security", "other", "deprecation", "worker"], "description": "Message source." },
                        { "name": "level", "type": "string", "enum": ["log", "warning", "error", "debug", "info"], "description": "Message severity." },
                        { "name": "text", "type": "string", "description": "Message text." },
                        { "name": "url", "type": "string", "optional": true, "description": "URL of the message origin." },
                        { "name": "line", "type": "integer", "optional": true, "description": "Line number in the resource that generated this message (1-based)." },
                        { "name": "column", "type": "integer", "optional": true, "description": "Column number in the resource that generated this message (1-based)." }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "enable",
                    "description": "Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification."
                },
                {
                    "name": "disable",
                    "description": "Disables console domain, prevents further console messages from being reported to the client."
                },
                {
                    "name": "clearMessages",
                    "description": "Does nothing."
                }
            ],
            "events": [
                {
                    "name": "messageAdded",
                    "parameters": [
                        { "name": "message", "$ref": "ConsoleMessage", "description": "Console message that has been added." }
                    ],
                    "description": "Issued when new console message is added."
                }
            ]
        },
        {
            "domain": "Profiler",
            "dependencies": ["Runtime", "Debugger"],
            "types": [
                {
                    "id": "ProfileNode",
                    "type": "object",
                    "description": "Profile node. Holds callsite information, execution statistics and child nodes.",
                    "properties": [
                        { "name": "id", "type": "integer", "description": "Unique id of the node." },
                        { "name": "callFrame", "$ref": "Runtime.CallFrame", "description": "Function location." },
                        { "name": "hitCount", "type": "integer", "optional": true, "experimental": true, "description": "Number of samples where this node was on top of the call stack." },
                        { "name": "children", "type": "array", "items": { "type": "integer" }, "optional": true, "description": "Child node ids." },
                        { "name": "deoptReason", "type": "string", "optional": true, "description": "The reason of being not optimized. The function may be deoptimized or marked as don't optimize."},
                        { "name": "positionTicks", "type": "array", "items": { "$ref": "PositionTickInfo" }, "optional": true, "experimental": true, "description": "An array of source position ticks." }
                    ]
                },
                {
                    "id": "Profile",
                    "type": "object",
                    "description": "Profile.",
                    "properties": [
                        { "name": "nodes", "type": "array", "items": { "$ref": "ProfileNode" }, "description": "The list of profile nodes. First item is the root node." },
                        { "name": "startTime", "type": "number", "description": "Profiling start timestamp in microseconds." },
                        { "name": "endTime", "type": "number", "description": "Profiling end timestamp in microseconds." },
                        { "name": "samples", "optional": true, "type": "array", "items": { "type": "integer" }, "description": "Ids of samples top nodes." },
                        { "name": "timeDeltas", "optional": true, "type": "array", "items": { "type": "integer" }, "description": "Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime." }
                    ]
                },
                {
                    "id": "PositionTickInfo",
                    "type": "object",
                    "experimental": true,
                    "description": "Specifies a number of samples attributed to a certain source position.",
                    "properties": [
                        { "name": "line", "type": "integer", "description": "Source line number (1-based)." },
                        { "name": "ticks", "type": "integer", "description": "Number of samples attributed to the source line." }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "enable"
                },
                {
                    "name": "disable"
                },
                {
                    "name": "setSamplingInterval",
                    "parameters": [
                        { "name": "interval", "type": "integer", "description": "New sampling interval in microseconds." }
                    ],
                    "description": "Changes CPU profiler sampling interval. Must be called before CPU profiles recording started."
                },
                {
                    "name": "start"
                },
                {
                    "name": "stop",
                    "returns": [
                        { "name": "profile", "$ref": "Profile", "description": "Recorded profile." }
                    ]
                }
            ],
            "events": [
                {
                    "name": "consoleProfileStarted",
                    "parameters": [
                        { "name": "id", "type": "string" },
                        { "name": "location", "$ref": "Debugger.Location", "description": "Location of console.profile()." },
                        { "name": "title", "type": "string", "optional": true, "description": "Profile title passed as an argument to console.profile()." }
                    ],
                    "description": "Sent when new profile recodring is started using console.profile() call."
                },
                {
                    "name": "consoleProfileFinished",
                    "parameters": [
                        { "name": "id", "type": "string" },
                        { "name": "location", "$ref": "Debugger.Location", "description": "Location of console.profileEnd()." },
                        { "name": "profile", "$ref": "Profile" },
                        { "name": "title", "type": "string", "optional": true, "description": "Profile title passed as an argument to console.profile()." }
                    ]
                }
            ]
        },
        {
            "domain": "HeapProfiler",
            "dependencies": ["Runtime"],
            "experimental": true,
            "types": [
                {
                    "id": "HeapSnapshotObjectId",
                    "type": "string",
                    "description": "Heap snapshot object id."
                },
                {
                    "id": "SamplingHeapProfileNode",
                    "type": "object",
                    "description": "Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.",
                    "properties": [
                        { "name": "callFrame", "$ref": "Runtime.CallFrame", "description": "Function location." },
                        { "name": "selfSize", "type": "number", "description": "Allocations size in bytes for the node excluding children." },
                        { "name": "children", "type": "array", "items": { "$ref": "SamplingHeapProfileNode" }, "description": "Child nodes." }
                    ]
                },
                {
                    "id": "SamplingHeapProfile",
                    "type": "object",
                    "description": "Profile.",
                    "properties": [
                        { "name": "head", "$ref": "SamplingHeapProfileNode" }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "enable"
                },
                {
                    "name": "disable"
                },
                {
                    "name": "startTrackingHeapObjects",
                    "parameters": [
                        { "name": "trackAllocations", "type": "boolean", "optional": true }
                    ]
                },
                {
                    "name": "stopTrackingHeapObjects",
                    "parameters": [
                        { "name": "reportProgress", "type": "boolean", "optional": true, "description": "If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped." }
                    ]
                },
                {
                    "name": "takeHeapSnapshot",
                    "parameters": [
                        { "name": "reportProgress", "type": "boolean", "optional": true, "description": "If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken." }
                    ]
                },
                {
                    "name": "collectGarbage"
                },
                {
                    "name": "getObjectByHeapObjectId",
                    "parameters": [
                        { "name": "objectId", "$ref": "HeapSnapshotObjectId" },
                        { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." }
                    ],
                    "returns": [
                        { "name": "result", "$ref": "Runtime.RemoteObject", "description": "Evaluation result." }
                    ]
                },
                {
                    "name": "addInspectedHeapObject",
                    "parameters": [
                        { "name": "heapObjectId", "$ref": "HeapSnapshotObjectId", "description": "Heap snapshot object id to be accessible by means of $x command line API." }
                    ],
                    "description": "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."
                },
                {
                    "name": "getHeapObjectId",
                    "parameters": [
                        { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "description": "Identifier of the object to get heap object id for." }
                    ],
                    "returns": [
                        { "name": "heapSnapshotObjectId", "$ref": "HeapSnapshotObjectId", "description": "Id of the heap snapshot object corresponding to the passed remote object id." }
                    ]
                },
                {
                    "name": "startSampling",
                    "parameters": [
                        { "name": "samplingInterval", "type": "number", "optional": true, "description": "Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes." }
                    ]
                },
                {
                    "name": "stopSampling",
                    "returns": [
                        { "name": "profile", "$ref": "SamplingHeapProfile", "description": "Recorded sampling heap profile." }
                    ]
                }
            ],
            "events": [
                {
                    "name": "addHeapSnapshotChunk",
                    "parameters": [
                        { "name": "chunk", "type": "string" }
                    ]
                },
                {
                    "name": "resetProfiles"
                },
                {
                    "name": "reportHeapSnapshotProgress",
                    "parameters": [
                        { "name": "done", "type": "integer" },
                        { "name": "total", "type": "integer" },
                        { "name": "finished", "type": "boolean", "optional": true }
                    ]
                },
                {
                    "name": "lastSeenObjectId",
                    "description": "If heap objects tracking has been started then backend regulary sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.",
                    "parameters": [
                        { "name": "lastSeenObjectId", "type": "integer" },
                        { "name": "timestamp", "type": "number" }
                    ]
                },
                {
                    "name": "heapStatsUpdate",
                    "description": "If heap objects tracking has been started then backend may send update for one or more fragments",
                    "parameters": [
                        { "name": "statsUpdate", "type": "array", "items": { "type": "integer" }, "description": "An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment."}
                    ]
                }
            ]
        },
        {
            "domain": "GenericTypes",
            "description": "Exposes generic types to be used by any domain.",
            "types": [
                {
                    "id": "SearchMatch",
                    "type": "object",
                    "description": "Search match in a resource.",
                    "properties": [
                        {
                            "name": "lineNumber",
                            "type": "number",
                            "description": "Line number in resource content."
                        },
                        {
                            "name": "lineContent",
                            "type": "string",
                            "description": "Line with match content."
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Page",
            "description": "Actions and events related to the inspected page belong to the page domain.",
            "types": [
                {
                    "id": "ResourceType",
                    "type": "string",
                    "enum": [
                        "Document",
                        "Stylesheet",
                        "Image",
                        "Font",
                        "Script",
                        "XHR",
                        "WebSocket",
                        "Other"
                    ],
                    "description": "Resource type as it was perceived by the rendering engine."
                },
                {
                    "id": "CoordinateSystem",
                    "type": "string",
                    "enum": [
                        "Viewport",
                        "Page"
                    ],
                    "description": "Coordinate system used by supplied coordinates."
                },
                {
                    "id": "Frame",
                    "type": "object",
                    "description": "Information about the Frame on the page.",
                    "properties": [
                        {
                            "name": "id",
                            "type": "string",
                            "description": "Frame unique identifier."
                        },
                        {
                            "name": "parentId",
                            "type": "string",
                            "optional": true,
                            "description": "Parent frame identifier."
                        },
                        {
                            "name": "loaderId",
                            "type": "string",
                            "description": "Identifier of the loader associated with this frame."
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "optional": true,
                            "description": "Frame's name as specified in the tag."
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "description": "Frame document's URL."
                        },
                        {
                            "name": "securityOrigin",
                            "type": "string",
                            "description": "Frame document's security origin."
                        },
                        {
                            "name": "mimeType",
                            "type": "string",
                            "description": "Frame document's mimeType as determined by the browser."
                        }
                    ]
                },
                {
                    "id": "FrameResource",
                    "type": "object",
                    "properties": [
                        {
                            "name": "url",
                            "type": "string",
                            "description": "Resource URL."
                        },
                        {
                            "name": "type",
                            "$ref": "ResourceType",
                            "description": "Type of this resource."
                        },
                        {
                            "name": "mimeType",
                            "type": "string",
                            "description": "Resource mimeType as determined by the browser."
                        },
                        {
                            "name": "failed",
                            "type": "boolean",
                            "optional": true,
                            "description": "True if the resource failed to load."
                        },
                        {
                            "name": "canceled",
                            "type": "boolean",
                            "optional": true,
                            "description": "True if the resource was canceled during loading."
                        },
                        {
                            "name": "sourceMapURL",
                            "type": "string",
                            "optional": true,
                            "description": "URL of source map associated with this resource (if any)."
                        }
                    ]
                },
                {
                    "id": "FrameResourceTree",
                    "type": "object",
                    "description": "Information about the Frame hierarchy along with their cached resources.",
                    "properties": [
                        {
                            "name": "frame",
                            "$ref": "Frame",
                            "description": "Frame information for this tree item."
                        },
                        {
                            "name": "childFrames",
                            "type": "array",
                            "optional": true,
                            "items": {
                                "$ref": "FrameResourceTree"
                            },
                            "description": "Child frames."
                        },
                        {
                            "name": "resources",
                            "type": "array",
                            "items": {
                                "$ref": "FrameResource"
                            },
                            "description": "Information about frame resources."
                        }
                    ]
                },
                {
                    "id": "SearchResult",
                    "type": "object",
                    "description": "Search result for resource.",
                    "properties": [
                        {
                            "name": "url",
                            "type": "string",
                            "description": "Resource URL."
                        },
                        {
                            "name": "frameId",
                            "type": "string",
                            "description": "Resource frame id."
                        },
                        {
                            "name": "matchesCount",
                            "type": "number",
                            "description": "Number of matches in the resource content."
                        },
                        {
                            "name": "requestId",
                            "type": "string",
                            "optional": true,
                            "description": "Network request id."
                        }
                    ]
                },
                {
                    "id": "ScriptIdentifier",
                    "type": "string",
                    "description": "Unique script identifier."
                }
            ],
            "commands": [
                {
                    "name": "enable",
                    "description": "Enables page domain notifications."
                },
                {
                    "name": "disable",
                    "description": "Disables page domain notifications."
                },
                {
                    "name": "addScriptToEvaluateOnLoad",
                    "parameters": [
                        {
                            "name": "scriptSource",
                            "type": "string"
                        }
                    ],
                    "returns": [
                        {
                            "name": "identifier",
                            "$ref": "ScriptIdentifier",
                            "description": "Identifier of the added script."
                        }
                    ]
                },
                {
                    "name": "removeScriptToEvaluateOnLoad",
                    "parameters": [
                        {
                            "name": "identifier",
                            "$ref": "ScriptIdentifier"
                        }
                    ]
                },
                {
                    "name": "reload",
                    "parameters": [
                        {
                            "name": "ignoreCache",
                            "type": "boolean",
                            "optional": true,
                            "description": "If true, browser cache is ignored (as if the user pressed Shift+refresh)."
                        },
                        {
                            "name": "scriptToEvaluateOnLoad",
                            "type": "string",
                            "optional": true,
                            "description": "If set, the script will be injected into all frames of the inspected page after reload."
                        }
                    ],
                    "description": "Reloads given page optionally ignoring the cache."
                },
                {
                    "name": "getResourceTree",
                    "description": "Returns present frame / resource tree structure.",
                    "returns": [
                        {
                            "name": "frameTree",
                            "$ref": "FrameResourceTree",
                            "description": "Present frame / resource tree structure."
                        }
                    ]
                },
                {
                    "name": "getResourceContent",
                    "description": "Returns content of the given resource.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "type": "string",
                            "description": "Frame id to get resource for."
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "description": "URL of the resource to get content for."
                        }
                    ],
                    "returns": [
                        {
                            "name": "content",
                            "type": "string",
                            "description": "Resource content."
                        },
                        {
                            "name": "base64Encoded",
                            "type": "boolean",
                            "description": "True, if content was served as base64."
                        }
                    ]
                },
                {
                    "name": "searchInResource",
                    "description": "Searches for given string in resource content.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "type": "string",
                            "description": "Frame id for resource to search in."
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "description": "URL of the resource to search in."
                        },
                        {
                            "name": "query",
                            "type": "string",
                            "description": "String to search for."
                        },
                        {
                            "name": "caseSensitive",
                            "type": "boolean",
                            "optional": true,
                            "description": "If true, search is case sensitive."
                        },
                        {
                            "name": "isRegex",
                            "type": "boolean",
                            "optional": true,
                            "description": "If true, treats string parameter as regex."
                        },
                        {
                            "name": "requestId",
                            "type": "string",
                            "optional": true,
                            "description": "Request id for resource to search in."
                        }
                    ],
                    "returns": [
                        {
                            "name": "result",
                            "type": "array",
                            "items": {
                                "$ref": "GenericTypes.SearchMatch"
                            },
                            "description": "List of search matches."
                        }
                    ]
                },
                {
                    "name": "searchInResources",
                    "description": "Searches for given string in frame / resource tree structure.",
                    "parameters": [
                        {
                            "name": "text",
                            "type": "string",
                            "description": "String to search for."
                        },
                        {
                            "name": "caseSensitive",
                            "type": "boolean",
                            "optional": true,
                            "description": "If true, search is case sensitive."
                        },
                        {
                            "name": "isRegex",
                            "type": "boolean",
                            "optional": true,
                            "description": "If true, treats string parameter as regex."
                        }
                    ],
                    "returns": [
                        {
                            "name": "result",
                            "type": "array",
                            "items": {
                                "$ref": "SearchResult"
                            },
                            "description": "List of search results."
                        }
                    ]
                },
                {
                    "name": "setDocumentContent",
                    "description": "Sets given markup as the document's HTML.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "type": "string",
                            "description": "Frame id to set HTML for."
                        },
                        {
                            "name": "html",
                            "type": "string",
                            "description": "HTML content to set."
                        }
                    ]
                }
            ],
            "events": [
                {
                    "name": "loadEventFired",
                    "parameters": [
                        {
                            "name": "timestamp",
                            "type": "number"
                        }
                    ]
                },
                {
                    "name": "frameDetached",
                    "description": "Fired when frame has been detached from its parent.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "type": "string",
                            "description": "Id of the frame that has been detached."
                        }
                    ]
                },
                {
                    "name": "frameStartedLoading",
                    "description": "Fired when frame has started loading.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "type": "string",
                            "description": "Id of the frame that has started loading."
                        }
                    ]
                },
                {
                    "name": "frameStoppedLoading",
                    "description": "Fired when frame has stopped loading.",
                    "parameters": [
                        {
                            "name": "frameId",
                            "type": "string",
                            "description": "Id of the frame that has stopped loading."
                        }
                    ]
                }
            ]
        },
        {
            "domain": "Network",
            "description": "Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.",
            "types": [
                {
                    "id": "LoaderId",
                    "type": "string",
                    "description": "Unique loader identifier."
                },
                {
                    "id": "FrameId",
                    "type": "string",
                    "description": "Unique frame identifier."
                },
                {
                    "id": "RequestId",
                    "type": "string",
                    "description": "Unique request identifier."
                },
                {
                    "id": "Timestamp",
                    "type": "number",
                    "description": "Number of seconds since epoch."
                },
                {
                    "id": "Headers",
                    "type": "object",
                    "description": "Request / response headers as keys / values of JSON object."
                },
                {
                    "id": "ResourceTiming",
                    "type": "object",
                    "description": "Timing information for the request.",
                    "properties": [
                        {
                            "name": "startTime",
                            "type": "number",
                            "description": "Timing's startTime is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this."
                        },
                        {
                            "name": "domainLookupStart",
                            "type": "number",
                            "description": "Started DNS address resolve."
                        },
                        {
                            "name": "domainLookupEnd",
                            "type": "number",
                            "description": "Finished DNS address resolve."
                        },
                        {
                            "name": "connectStart",
                            "type": "number",
                            "description": "Started connecting to the remote host."
                        },
                        {
                            "name": "connectEnd",
                            "type": "number",
                            "description": "Connected to the remote host."
                        },
                        {
                            "name": "secureConnectionStart",
                            "type": "number",
                            "description": "Started SSL handshake."
                        },
                        {
                            "name": "requestStart",
                            "type": "number",
                            "description": "Started sending request."
                        },
                        {
                            "name": "responseStart",
                            "type": "number",
                            "description": "Started receiving response headers."
                        }
                    ]
                },
                {
                    "id": "Request",
                    "type": "object",
                    "description": "HTTP request data.",
                    "properties": [
                        {
                            "name": "url",
                            "type": "string",
                            "description": "Request URL."
                        },
                        {
                            "name": "method",
                            "type": "string",
                            "description": "HTTP request method."
                        },
                        {
                            "name": "headers",
                            "$ref": "Headers",
                            "description": "HTTP request headers."
                        },
                        {
                            "name": "postData",
                            "type": "string",
                            "optional": true,
                            "description": "HTTP POST request data."
                        }
                    ]
                },
                {
                    "id": "Response",
                    "type": "object",
                    "description": "HTTP response data.",
                    "properties": [
                        {
                            "name": "url",
                            "type": "string",
                            "description": "Response URL. This URL can be different from CachedResource.url in case of redirect."
                        },
                        {
                            "name": "status",
                            "type": "number",
                            "description": "HTTP response status code."
                        },
                        {
                            "name": "statusText",
                            "type": "string",
                            "description": "HTTP response status text."
                        },
                        {
                            "name": "headers",
                            "$ref": "Headers",
                            "description": "HTTP response headers."
                        },
                        {
                            "name": "headersText",
                            "type": "string",
                            "optional": true,
                            "description": "HTTP response headers text."
                        },
                        {
                            "name": "mimeType",
                            "type": "string",
                            "description": "Resource mimeType as determined by the browser."
                        },
                        {
                            "name": "requestHeaders",
                            "$ref": "Headers",
                            "optional": true,
                            "description": "Refined HTTP request headers that were actually transmitted over the network."
                        },
                        {
                            "name": "requestHeadersText",
                            "type": "string",
                            "optional": true,
                            "description": "HTTP request headers text."
                        },
                        {
                            "name": "fromDiskCache",
                            "type": "boolean",
                            "optional": true,
                            "description": "Specifies that the request was served from the disk cache."
                        },
                        {
                            "name": "timing",
                            "$ref": "ResourceTiming",
                            "optional": true,
                            "description": "Timing information for the given request."
                        }
                    ]
                },
                {
                    "id": "WebSocketRequest",
                    "type": "object",
                    "description": "WebSocket request data.",
                    "properties": [
                        {
                            "name": "headers",
                            "$ref": "Headers",
                            "description": "HTTP response headers."
                        }
                    ]
                },
                {
                    "id": "WebSocketResponse",
                    "type": "object",
                    "description": "WebSocket response data.",
                    "properties": [
                        {
                            "name": "status",
                            "type": "number",
                            "description": "HTTP response status code."
                        },
                        {
                            "name": "statusText",
                            "type": "string",
                            "description": "HTTP response status text."
                        },
                        {
                            "name": "headers",
                            "$ref": "Headers",
                            "description": "HTTP response headers."
                        }
                    ]
                },
                {
                    "id": "WebSocketFrame",
                    "type": "object",
                    "description": "WebSocket frame data.",
                    "properties": [
                        {
                            "name": "opcode",
                            "type": "number",
                            "description": "WebSocket frame opcode."
                        },
                        {
                            "name": "mask",
                            "type": "boolean",
                            "description": "WebSocket frame mask."
                        },
                        {
                            "name": "payloadData",
                            "type": "string",
                            "description": "WebSocket frame payload data."
                        }
                    ]
                },
                {
                    "id": "CachedResource",
                    "type": "object",
                    "description": "Information about the cached resource.",
                    "properties": [
                        {
                            "name": "url",
                            "type": "string",
                            "description": "Resource URL. This is the url of the original network request."
                        },
                        {
                            "name": "type",
                            "$ref": "Page.ResourceType",
                            "description": "Type of this resource."
                        },
                        {
                            "name": "response",
                            "$ref": "Response",
                            "optional": true,
                            "description": "Cached response data."
                        },
                        {
                            "name": "bodySize",
                            "type": "number",
                            "description": "Cached response body size."
                        },
                        {
                            "name": "sourceMapURL",
                            "type": "string",
                            "optional": true,
                            "description": "URL of source map associated with this resource (if any)."
                        }
                    ]
                },
                {
                    "id": "Initiator",
                    "type": "object",
                    "description": "Information about the request initiator.",
                    "properties": [
                        {
                            "name": "type",
                            "type": "string",
                            "enum": [
                                "parser",
                                "script",
                                "other"
                            ],
                            "description": "Type of this initiator."
                        },
                        {
                            "name": "stackTrace",
                            "$ref": "Runtime.StackTrace",
                            "optional": true,
                            "description": "Initiator JavaScript stack trace, set for Script only."
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "optional": true,
                            "description": "Initiator URL, set for Parser type only."
                        },
                        {
                            "name": "lineNumber",
                            "type": "number",
                            "optional": true,
                            "description": "Initiator line number, set for Parser type only."
                        }
                    ]
                }
            ],
            "commands": [
                {
                    "name": "enable",
                    "description": "Enables network tracking, network events will now be delivered to the client."
                },
                {
                    "name": "disable",
                    "description": "Disables network tracking, prevents network events from being sent to the client."
                },
                {
                    "name": "setExtraHTTPHeaders",
                    "description": "Specifies whether to always send extra HTTP headers with the requests from this page.",
                    "parameters": [
                        {
                            "name": "headers",
                            "$ref": "Headers",
                            "description": "Map with extra HTTP headers."
                        }
                    ]
                },
                {
                    "name": "getResponseBody",
                    "description": "Returns content served for the given request.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Identifier of the network request to get content for."
                        }
                    ],
                    "returns": [
                        {
                            "name": "body",
                            "type": "string",
                            "description": "Response body."
                        },
                        {
                            "name": "base64Encoded",
                            "type": "boolean",
                            "description": "True, if content was sent as base64."
                        }
                    ]
                },
                {
                    "name": "setCacheDisabled",
                    "parameters": [
                        {
                            "name": "cacheDisabled",
                            "type": "boolean",
                            "description": "Cache disabled state."
                        }
                    ],
                    "description": "Toggles ignoring cache for each request. If <code>true</code>, cache will not be used."
                },
                {
                    "name": "loadResource",
                    "async": true,
                    "parameters": [
                        {
                            "name": "frameId",
                            "$ref": "FrameId",
                            "description": "Frame to load the resource from."
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "description": "URL of the resource to load."
                        }
                    ],
                    "returns": [
                        {
                            "name": "content",
                            "type": "string",
                            "description": "Resource content."
                        },
                        {
                            "name": "mimeType",
                            "type": "string",
                            "description": "Resource mimeType."
                        },
                        {
                            "name": "status",
                            "type": "number",
                            "description": "HTTP response status code."
                        }
                    ],
                    "description": "Loads a resource in the context of a frame on the inspected page without cross origin checks."
                }
            ],
            "events": [
                {
                    "name": "requestWillBeSent",
                    "description": "Fired when page is about to send HTTP request.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "frameId",
                            "$ref": "FrameId",
                            "description": "Frame identifier."
                        },
                        {
                            "name": "loaderId",
                            "$ref": "LoaderId",
                            "description": "Loader identifier."
                        },
                        {
                            "name": "documentURL",
                            "type": "string",
                            "description": "URL of the document this request is loaded for."
                        },
                        {
                            "name": "request",
                            "$ref": "Request",
                            "description": "Request data."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "initiator",
                            "$ref": "Initiator",
                            "description": "Request initiator."
                        },
                        {
                            "name": "redirectResponse",
                            "optional": true,
                            "$ref": "Response",
                            "description": "Redirect response data."
                        },
                        {
                            "name": "type",
                            "$ref": "Page.ResourceType",
                            "optional": true,
                            "description": "Resource type."
                        }
                    ]
                },
                {
                    "name": "requestServedFromCache",
                    "description": "Fired if request ended up loading from cache.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        }
                    ]
                },
                {
                    "name": "responseReceived",
                    "description": "Fired when HTTP response is available.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "frameId",
                            "$ref": "FrameId",
                            "description": "Frame identifier."
                        },
                        {
                            "name": "loaderId",
                            "$ref": "LoaderId",
                            "description": "Loader identifier."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "type",
                            "$ref": "Page.ResourceType",
                            "description": "Resource type."
                        },
                        {
                            "name": "response",
                            "$ref": "Response",
                            "description": "Response data."
                        }
                    ]
                },
                {
                    "name": "dataReceived",
                    "description": "Fired when data chunk was received over the network.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "dataLength",
                            "type": "integer",
                            "description": "Data chunk length."
                        },
                        {
                            "name": "encodedDataLength",
                            "type": "integer",
                            "description": "Actual bytes received (might be less than dataLength for compressed encodings)."
                        }
                    ]
                },
                {
                    "name": "loadingFinished",
                    "description": "Fired when HTTP request has finished loading.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "sourceMapURL",
                            "type": "string",
                            "optional": true,
                            "description": "URL of source map associated with this resource (if any)."
                        }
                    ]
                },
                {
                    "name": "loadingFailed",
                    "description": "Fired when HTTP request has failed to load.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "errorText",
                            "type": "string",
                            "description": "User friendly error message."
                        },
                        {
                            "name": "canceled",
                            "type": "boolean",
                            "optional": true,
                            "description": "True if loading was canceled."
                        }
                    ]
                },
                {
                    "name": "requestServedFromMemoryCache",
                    "description": "Fired when HTTP request has been served from memory cache.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "frameId",
                            "$ref": "FrameId",
                            "description": "Frame identifier."
                        },
                        {
                            "name": "loaderId",
                            "$ref": "LoaderId",
                            "description": "Loader identifier."
                        },
                        {
                            "name": "documentURL",
                            "type": "string",
                            "description": "URL of the document this request is loaded for."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "initiator",
                            "$ref": "Initiator",
                            "description": "Request initiator."
                        },
                        {
                            "name": "resource",
                            "$ref": "CachedResource",
                            "description": "Cached resource data."
                        }
                    ]
                },
                {
                    "name": "webSocketWillSendHandshakeRequest",
                    "description": "Fired when WebSocket is about to initiate handshake.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "request",
                            "$ref": "WebSocketRequest",
                            "description": "WebSocket request data."
                        }
                    ]
                },
                {
                    "name": "webSocketHandshakeResponseReceived",
                    "description": "Fired when WebSocket handshake response becomes available.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "response",
                            "$ref": "WebSocketResponse",
                            "description": "WebSocket response data."
                        }
                    ]
                },
                {
                    "name": "webSocketCreated",
                    "description": "Fired upon WebSocket creation.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "url",
                            "type": "string",
                            "description": "WebSocket request URL."
                        }
                    ]
                },
                {
                    "name": "webSocketClosed",
                    "description": "Fired when WebSocket is closed.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        }
                    ]
                },
                {
                    "name": "webSocketFrameReceived",
                    "description": "Fired when WebSocket frame is received.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "response",
                            "$ref": "WebSocketFrame",
                            "description": "WebSocket response data."
                        }
                    ]
                },
                {
                    "name": "webSocketFrameError",
                    "description": "Fired when WebSocket frame error occurs.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "errorMessage",
                            "type": "string",
                            "description": "WebSocket frame error message."
                        }
                    ]
                },
                {
                    "name": "webSocketFrameSent",
                    "description": "Fired when WebSocket frame is sent.",
                    "parameters": [
                        {
                            "name": "requestId",
                            "$ref": "RequestId",
                            "description": "Request identifier."
                        },
                        {
                            "name": "timestamp",
                            "$ref": "Timestamp",
                            "description": "Timestamp."
                        },
                        {
                            "name": "response",
                            "$ref": "WebSocketFrame",
                            "description": "WebSocket response data."
                        }
                    ]
                }
            ]
        },
         {
            "domain": "DOM",
            "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.",
            "types": [
                {
                    "id": "NodeId",
                    "type": "integer",
                    "description": "Unique DOM node identifier."
                },
                {
                    "id": "BackendNodeId",
                    "type": "integer",
                    "description": "Unique DOM node identifier used to reference a node that may not have been pushed to the front-end."
                },
                {
                    "id": "PseudoType",
                    "type": "string",
                    "enum": [
                        "before",
                        "after"
                    ],
                    "description": "Pseudo element type."
                },
                {
                    "id": "ShadowRootType",
                    "type": "string",
                    "enum": [
                        "user-agent",
                        "open",
                        "closed"
                    ],
                    "description": "Shadow root type."
                },
                {
                    "id": "LiveRegionRelevant",
                    "type": "string",
                    "enum": [
                        "additions",
                        "removals",
                        "text"
                    ],
                    "description": "Token values of @aria-relevant attribute."
                },
                {
                    "id": "Node",
                    "type": "object",
                    "properties": [
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client."
                        },
                        {
                            "name": "nodeType",
                            "type": "integer",
                            "description": "<code>Node</code>'s nodeType."
                        },
                        {
                            "name": "nodeName",
                            "type": "string",
                            "description": "<code>Node</code>'s nodeName."
                        },
                        {
                            "name": "localName",
                            "type": "string",
                            "description": "<code>Node</code>'s localName."
                        },
                        {
                            "name": "nodeValue",
                            "type": "string",
                            "description": "<code>Node</code>'s nodeValue."
                        },
                        {
                            "name": "childNodeCount",
                            "type": "integer",
                            "optional": true,
                            "description": "Child count for <code>Container</code> nodes."
                        },
                        {
                            "name": "children",
                            "type": "array",
                            "optional": true,
                            "items": {
                                "$ref": "Node"
                            },
                            "description": "Child nodes of this node when requested with children."
                        },
                        {
                            "name": "attributes",
                            "type": "array",
                            "optional": true,
                            "items": {
                                "type": "string"
                            },
                            "description": "Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>."
                        },
                        {
                            "name": "documentURL",
                            "type": "string",
                            "optional": true,
                            "description": "Document URL that <code>Document</code> or <code>FrameOwner</code> node points to."
                        },
                        {
                            "name": "baseURL",
                            "type": "string",
                            "optional": true,
                            "description": "Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion."
                        },
                        {
                            "name": "publicId",
                            "type": "string",
                            "optional": true,
                            "description": "<code>DocumentType</code>'s publicId."
                        },
                        {
                            "name": "systemId",
                            "type": "string",
                            "optional": true,
                            "description": "<code>DocumentType</code>'s systemId."
                        },
                        {
                            "name": "xmlVersion",
                            "type": "string",
                            "optional": true,
                            "description": "<code>Document</code>'s XML version in case of XML documents."
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "optional": true,
                            "description": "<code>Attr</code>'s name."
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "optional": true,
                            "description": "<code>Attr</code>'s value."
                        },
                        {
                            "name": "pseudoType",
                            "$ref": "PseudoType",
                            "optional": true,
                            "description": "Pseudo element type for this node."
                        },
                        {
                            "name": "shadowRootType",
                            "$ref": "ShadowRootType",
                            "optional": true,
                            "description": "Shadow root type."
                        },
                        {
                            "name": "frameId",
                            "$ref": "Network.FrameId",
                            "optional": true,
                            "description": "Frame ID for frame owner elements."
                        },
                        {
                            "name": "contentDocument",
                            "$ref": "Node",
                            "optional": true,
                            "description": "Content document for frame owner elements."
                        },
                        {
                            "name": "shadowRoots",
                            "type": "array",
                            "optional": true,
                            "items": {
                                "$ref": "Node"
                            },
                            "description": "Shadow root list for given element host."
                        },
                        {
                            "name": "templateContent",
                            "$ref": "Node",
                            "optional": true,
                            "description": "Content document fragment for template elements"
                        },
                        {
                            "name": "pseudoElements",
                            "type": "array",
                            "items": {
                                "$ref": "Node"
                            },
                            "optional": true,
                            "description": "Pseudo elements associated with this node."
                        },
                        {
                            "name": "role",
                            "type": "string",
                            "optional": true,
                            "description": "Computed value for first recognized role token, default role per element, or overridden role."
                        },
                        {
                            "name": "contentSecurityPolicyHash",
                            "type": "string",
                            "optional": true,
                            "description": "Computed SHA-256 Content Security Policy hash source for given element."
                        }
                    ],
                    "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
                },
                {
                    "id": "RGBAColor",
                    "type": "object",
                    "properties": [
                        {
                            "name": "r",
                            "type": "integer",
                            "description": "The red component, in the [0-255] range."
                        },
                        {
                            "name": "g",
                            "type": "integer",
                            "description": "The green component, in the [0-255] range."
                        },
                        {
                            "name": "b",
                            "type": "integer",
                            "description": "The blue component, in the [0-255] range."
                        },
                        {
                            "name": "a",
                            "type": "number",
                            "optional": true,
                            "description": "The alpha component, in the [0-1] range (default: 1)."
                        }
                    ],
                    "description": "A structure holding an RGBA color."
                },
                {
                    "id": "Quad",
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "minItems": 8,
                    "maxItems": 8,
                    "description": "An array of quad vertices, x immediately followed by y for each point, points clock-wise."
                },
                {
                    "id": "HighlightConfig",
                    "type": "object",
                    "properties": [
                        {
                            "name": "showInfo",
                            "type": "boolean",
                            "optional": true,
                            "description": "Whether the node info tooltip should be shown (default: false)."
                        },
                        {
                            "name": "contentColor",
                            "$ref": "RGBAColor",
                            "optional": true,
                            "description": "The content box highlight fill color (default: transparent)."
                        },
                        {
                            "name": "paddingColor",
                            "$ref": "RGBAColor",
                            "optional": true,
                            "description": "The padding highlight fill color (default: transparent)."
                        },
                        {
                            "name": "borderColor",
                            "$ref": "RGBAColor",
                            "optional": true,
                            "description": "The border highlight fill color (default: transparent)."
                        },
                        {
                            "name": "marginColor",
                            "$ref": "RGBAColor",
                            "optional": true,
                            "description": "The margin highlight fill color (default: transparent)."
                        }
                    ],
                    "description": "Configuration data for the highlighting of page elements."
                }
            ],
            "commands": [
                                {
                    "name": "enable"
                },
                {
                    "name": "disable"
                },
                {
                    "name": "getDocument",
                    "returns": [
                        {
                            "name": "root",
                            "$ref": "Node",
                            "description": "Resulting node."
                        }
                    ],
                    "description": "Returns the root DOM node to the caller."
                },
                {
                    "name": "removeNode",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Id of the node to remove."
                        }
                    ],
                    "description": "Removes node with given id."
                },
                {
                    "name": "setAttributeValue",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Id of the element to set attribute for."
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "description": "Attribute name."
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "description": "Attribute value."
                        }
                    ],
                    "description": "Sets attribute for an element with given id."
                },
                {
                    "name": "setAttributesAsText",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Id of the element to set attributes for."
                        },
                        {
                            "name": "text",
                            "type": "string",
                            "description": "Text with a number of attributes. Will parse this text using HTML parser."
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "optional": true,
                            "description": "Attribute name to replace with new attributes derived from text in case text parsed successfully."
                        }
                    ],
                    "description": "Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs."
                },
                {
                    "name": "removeAttribute",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Id of the element to remove attribute from."
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "description": "Name of the attribute to remove."
                        }
                    ],
                    "description": "Removes attribute with given name from an element with given id."
                },
                {
                    "name": "performSearch",
                    "parameters": [
                        {
                            "name": "query",
                            "type": "string",
                            "description": "Plain text or query selector or XPath search query."
                        },
                        {
                            "name": "nodeIds",
                            "type": "array",
                            "items": {
                                "$ref": "NodeId"
                            },
                            "optional": true,
                            "description": "Ids of nodes to use as starting points for the search."
                        }
                    ],
                    "returns": [
                        {
                            "name": "searchId",
                            "type": "string",
                            "description": "Unique search session identifier."
                        },
                        {
                            "name": "resultCount",
                            "type": "integer",
                            "description": "Number of search results."
                        }
                    ],
                    "description": "Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session."
                },
                {
                    "name": "getSearchResults",
                    "parameters": [
                        {
                            "name": "searchId",
                            "type": "string",
                            "description": "Unique search session identifier."
                        },
                        {
                            "name": "fromIndex",
                            "type": "integer",
                            "description": "Start index of the search result to be returned."
                        },
                        {
                            "name": "toIndex",
                            "type": "integer",
                            "description": "End index of the search result to be returned."
                        }
                    ],
                    "returns": [
                        {
                            "name": "nodeIds",
                            "type": "array",
                            "items": {
                                "$ref": "NodeId"
                            },
                            "description": "Ids of the search result nodes."
                        }
                    ],
                    "description": "Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier."
                },
                {
                    "name": "discardSearchResults",
                    "parameters": [
                        {
                            "name": "searchId",
                            "type": "string",
                            "description": "Unique search session identifier."
                        }
                    ],
                    "description": "Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search."
                },
                {
                    "name": "highlightNode",
                    "parameters": [
                        {
                            "name": "highlightConfig",
                            "$ref": "HighlightConfig",
                            "description": "A descriptor for the highlight appearance."
                        },
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "optional": true,
                            "description": "Identifier of the node to highlight."
                        },
                        {
                            "name": "objectId",
                            "$ref": "Runtime.RemoteObjectId",
                            "optional": true,
                            "description": "JavaScript object id of the node to be highlighted."
                        }
                    ],
                    "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified."
                },
                {
                    "name": "hideHighlight",
                    "description": "Hides DOM node highlight."
                },
                {
                    "name": "resolveNode",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Id of the node to resolve."
                        },
                        {
                            "name": "objectGroup",
                            "type": "string",
                            "optional": true,
                            "description": "Symbolic group name that can be used to release multiple objects."
                        }
                    ],
                    "returns": [
                        {
                            "name": "object",
                            "$ref": "Runtime.RemoteObject",
                            "description": "JavaScript object wrapper for given node."
                        }
                    ],
                    "description": "Resolves JavaScript node object for given node id."
                }
            ],
            "events": [
                {
                    "name": "documentUpdated",
                    "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid."
                },
                {
                    "name": "setChildNodes",
                    "parameters": [
                        {
                            "name": "parentId",
                            "$ref": "NodeId",
                            "description": "Parent node id to populate with children."
                        },
                        {
                            "name": "nodes",
                            "type": "array",
                            "items": {
                                "$ref": "Node"
                            },
                            "description": "Child nodes array."
                        }
                    ],
                    "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids."
                },
                {
                    "name": "attributeModified",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Id of the node that has changed."
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "description": "Attribute name."
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "description": "Attribute value."
                        }
                    ],
                    "description": "Fired when <code>Element</code>'s attribute is modified."
                },
                {
                    "name": "attributeRemoved",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Id of the node that has changed."
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "description": "A ttribute name."
                        }
                    ],
                    "description": "Fired when <code>Element</code>'s attribute is removed."
                },
                {
                    "name": "inlineStyleInvalidated",
                    "parameters": [
                        {
                            "name": "nodeIds",
                            "type": "array",
                            "items": {
                                "$ref": "NodeId"
                            },
                            "description": "Ids of the nodes for which the inline styles have been invalidated."
                        }
                    ],
                    "description": "Fired when <code>Element</code>'s inline style is modified via a CSS property modification."
                },
                {
                    "name": "characterDataModified",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Id of the node that has changed."
                        },
                        {
                            "name": "characterData",
                            "type": "string",
                            "description": "New text value."
                        }
                    ],
                    "description": "Mirrors <code>DOMCharacterDataModified</code> event."
                },
                {
                    "name": "childNodeCountUpdated",
                    "parameters": [
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Id of the node that has changed."
                        },
                        {
                            "name": "childNodeCount",
                            "type": "integer",
                            "description": "New node count."
                        }
                    ],
                    "description": "Fired when <code>Container</code>'s child node count has changed."
                },
                {
                    "name": "childNodeInserted",
                    "parameters": [
                        {
                            "name": "parentNodeId",
                            "$ref": "NodeId",
                            "description": "Id of the node that has changed."
                        },
                        {
                            "name": "previousNodeId",
                            "$ref": "NodeId",
                            "description": "If of the previous siblint."
                        },
                        {
                            "name": "node",
                            "$ref": "Node",
                            "description": "Inserted node data."
                        }
                    ],
                    "description": "Mirrors <code>DOMNodeInserted</code> event."
                },
                {
                    "name": "childNodeRemoved",
                    "parameters": [
                        {
                            "name": "parentNodeId",
                            "$ref": "NodeId",
                            "description": "Parent id."
                        },
                        {
                            "name": "nodeId",
                            "$ref": "NodeId",
                            "description": "Id of the node that has been removed."
                        }
                    ],
                    "description": "Mirrors <code>DOMNodeRemoved</code> event."
                },
                {
                    "name": "shadowRootPushed",
                    "parameters": [
                        {
                            "name": "hostId",
                            "$ref": "NodeId",
                            "description": "Host element id."
                        },
                        {
                            "name": "root",
                            "$ref": "Node",
                            "description": "Shadow root."
                        }
                    ],
                    "description": "Called when shadow root is pushed into the element."
                },
                {
                    "name": "shadowRootPopped",
                    "parameters": [
                        {
                            "name": "hostId",
                            "$ref": "NodeId",
                            "description": "Host element id."
                        },
                        {
                            "name": "rootId",
                            "$ref": "NodeId",
                            "description": "Shadow root id."
                        }
                    ],
                    "description": "Called when shadow root is popped from the element."
                },
                {
                    "name": "pseudoElementAdded",
                    "parameters": [
                        {
                            "name": "parentId",
                            "$ref": "NodeId",
                            "description": "Pseudo element's parent element id."
                        },
                        {
                            "name": "pseudoElement",
                            "$ref": "Node",
                            "description": "The added pseudo element."
                        }
                    ],
                    "description": "Called when a pseudo element is added to an element."
                },
                {
                    "name": "pseudoElementRemoved",
                    "parameters": [
                        {
                            "name": "parentId",
                            "$ref": "NodeId",
                            "description": "Pseudo element's parent element id."
                        },
                        {
                            "name": "pseudoElementId",
                            "$ref": "NodeId",
                            "description": "The removed pseudo element id."
                        }
                    ],
                    "description": "Called when a pseudo element is removed from an element."
                }
            ]
        },
        {
            "domain": "CSS",
            "experimental": true,
            "description": "This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles) have an associated 'id' used in subsequent operations on the related object. Each object type has a specific 'id' structure, and those are not interchangeable between objects of different kinds. CSS objects can be loaded using the <code>get*ForNode()</code> calls (which accept a DOM node id). A client can also discover all the existing stylesheets with the <code>getAllStyleSheets()</code> method (or keeping track of the <code>styleSheetAdded</code>/<code>styleSheetRemoved</code> events) and subsequently load the required stylesheet contents using the <code>getStyleSheet[Text]()</code> methods.",
            "types": [
                {
                    "id": "StyleSheetId",
                    "type": "string"
                },
                {
                    "id": "StyleSheetOrigin",
                    "type": "string",
                    "enum": ["injected", "user-agent", "inspector", "regular"],
                    "description": "Stylesheet type: \"injected\" for stylesheets injected via extension, \"user-agent\" for user-agent stylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via inspector\" rules), \"regular\" for regular stylesheets."
                },
                {
                    "id": "PseudoElementMatches",
                    "type": "object",
                    "properties": [
                        { "name": "pseudoType", "$ref": "DOM.PseudoType", "description": "Pseudo element type."},
                        { "name": "matches", "type": "array", "items": { "$ref": "RuleMatch" }, "description": "Matches of CSS rules applicable to the pseudo style."}
                    ],
                    "description": "CSS rule collection for a single pseudo style."
                },
                {
                    "id": "InheritedStyleEntry",
                    "type": "object",
                    "properties": [
                        { "name": "inlineStyle", "$ref": "CSSStyle", "optional": true, "description": "The ancestor node's inline style, if any, in the style inheritance chain." },
                        { "name": "matchedCSSRules", "type": "array", "items": { "$ref": "RuleMatch" }, "description": "Matches of CSS rules matching the ancestor node in the style inheritance chain." }
                    ],
                    "description": "Inherited CSS rule collection from ancestor node."
                },
                {
                    "id": "RuleMatch",
                    "type": "object",
                    "properties": [
                        { "name": "rule", "$ref": "CSSRule", "description": "CSS rule in the match." },
                        { "name": "matchingSelectors", "type": "array", "items": { "type": "integer" }, "description": "Matching selector indices in the rule's selectorList selectors (0-based)." }
                    ],
                    "description": "Match data for a CSS rule."
                },
                {
                    "id": "Value",
                    "type": "object",
                    "properties": [
                        { "name": "text", "type": "string", "description": "Value text." },
                        { "name": "range", "$ref": "SourceRange", "optional": true, "description": "Value range in the underlying resource (if available)." }
                    ],
                    "description": "Data for a simple selector (these are delimited by commas in a selector list)."
                },
                {
                    "id": "SelectorList",
                    "type": "object",
                    "properties": [
                        { "name": "selectors", "type": "array", "items": { "$ref": "Value" }, "description": "Selectors in the list." },
                        { "name": "text", "type": "string", "description": "Rule selector text." }
                    ],
                    "description": "Selector list data."
                },
                {
                    "id": "CSSStyleSheetHeader",
                    "type": "object",
                    "properties": [
                        { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "The stylesheet identifier."},
                        { "name": "frameId", "type": "string", "description": "Owner frame identifier."},
                        { "name": "sourceURL", "type": "string", "description": "Stylesheet resource URL."},
                        { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with the stylesheet (if any)." },
                        { "name": "origin", "$ref": "StyleSheetOrigin", "description": "Stylesheet origin."},
                        { "name": "title", "type": "string", "description": "Stylesheet title."},
                        { "name": "ownerNode", "$ref": "DOM.BackendNodeId", "optional": true, "description": "The backend id for the owner node of the stylesheet." },
                        { "name": "disabled", "type": "boolean", "description": "Denotes whether the stylesheet is disabled."},
                        { "name": "hasSourceURL", "type": "boolean", "optional": true, "description": "Whether the sourceURL field value comes from the sourceURL comment." },
                        { "name": "isInline", "type": "boolean", "description": "Whether this stylesheet is created for STYLE tag by parser. This flag is not set for document.written STYLE tags." },
                        { "name": "startLine", "type": "number", "description": "Line offset of the stylesheet within the resource (zero based)." },
                        { "name": "startColumn", "type": "number", "description": "Column offset of the stylesheet within the resource (zero based)." }
                    ],
                    "description": "CSS stylesheet metainformation."
                },
                {
                    "id": "CSSRule",
                    "type": "object",
                    "properties": [
                        { "name": "styleSheetId", "$ref": "StyleSheetId", "optional": true, "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from." },
                        { "name": "selectorList", "$ref": "SelectorList", "description": "Rule selector data." },
                        { "name": "origin", "$ref": "StyleSheetOrigin", "description": "Parent stylesheet's origin."},
                        { "name": "style", "$ref": "CSSStyle", "description": "Associated style declaration." },
                        { "name": "media", "type": "array", "items": { "$ref": "CSSMedia" }, "optional": true, "description": "Media list array (for rules involving media queries). The array enumerates media queries starting with the innermost one, going outwards." }
                    ],
                    "description": "CSS rule representation."
                },
                {
                    "id": "SourceRange",
                    "type": "object",
                    "properties": [
                        { "name": "startLine", "type": "integer", "description": "Start line of range." },
                        { "name": "startColumn", "type": "integer", "description": "Start column of range (inclusive)." },
                        { "name": "endLine", "type": "integer", "description": "End line of range" },
                        { "name": "endColumn", "type": "integer", "description": "End column of range (exclusive)." }
                    ],
                    "description": "Text range within a resource. All numbers are zero-based."
                },
                {
                    "id": "ShorthandEntry",
                    "type": "object",
                    "properties": [
                        { "name": "name", "type": "string", "description": "Shorthand name." },
                        { "name": "value", "type": "string", "description": "Shorthand value." },
                        { "name": "important", "type": "boolean", "optional": true, "description": "Whether the property has \"!important\" annotation (implies <code>false</code> if absent)." }
                    ]
                },
                {
                    "id": "CSSComputedStyleProperty",
                    "type": "object",
                    "properties": [
                        { "name": "name", "type": "string", "description": "Computed style property name." },
                        { "name": "value", "type": "string", "description": "Computed style property value." }
                    ]
                },
                {
                    "id": "CSSStyle",
                    "type": "object",
                    "properties": [
                        { "name": "styleSheetId", "$ref": "StyleSheetId", "optional": true, "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from." },
                        { "name": "cssProperties", "type": "array", "items": { "$ref": "CSSProperty" }, "description": "CSS properties in the style." },
                        { "name": "shorthandEntries", "type": "array", "items": { "$ref": "ShorthandEntry" }, "description": "Computed values for all shorthands found in the style." },
                        { "name": "cssText", "type": "string", "optional": true, "description": "Style declaration text (if available)." },
                        { "name": "range", "$ref": "SourceRange", "optional": true, "description": "Style declaration range in the enclosing stylesheet (if available)." }
                    ],
                    "description": "CSS style representation."
                },
                {
                    "id": "CSSProperty",
                    "type": "object",
                    "properties": [
                        { "name": "name", "type": "string", "description": "The property name." },
                        { "name": "value", "type": "string", "description": "The property value." },
                        { "name": "important", "type": "boolean", "optional": true, "description": "Whether the property has \"!important\" annotation (implies <code>false</code> if absent)." },
                        { "name": "implicit", "type": "boolean", "optional": true, "description": "Whether the property is implicit (implies <code>false</code> if absent)." },
                        { "name": "text", "type": "string", "optional": true, "description": "The full property text as specified in the style." },
                        { "name": "parsedOk", "type": "boolean", "optional": true, "description": "Whether the property is understood by the browser (implies <code>true</code> if absent)." },
                        { "name": "disabled", "type": "boolean", "optional": true, "description": "Whether the property is disabled by the user (present for source-based properties only)." },
                        { "name": "range", "$ref": "SourceRange", "optional": true, "description": "The entire property range in the enclosing style declaration (if available)." }
                    ],
                    "description": "CSS property declaration data."
                },
                {
                    "id": "CSSMedia",
                    "type": "object",
                    "properties": [
                        { "name": "text", "type": "string", "description": "Media query text." },
                        { "name": "source", "type": "string", "enum": ["mediaRule", "importRule", "linkedSheet", "inlineSheet"], "description": "Source of the media query: \"mediaRule\" if specified by a @media rule, \"importRule\" if specified by an @import rule, \"linkedSheet\" if specified by a \"media\" attribute in a linked stylesheet's LINK tag, \"inlineSheet\" if specified by a \"media\" attribute in an inline stylesheet's STYLE tag." },
                        { "name": "sourceURL", "type": "string", "optional": true, "description": "URL of the document containing the media query description." },
                        { "name": "range", "$ref": "SourceRange", "optional": true, "description": "The associated rule (@media or @import) header range in the enclosing stylesheet (if available)." },
                        { "name": "styleSheetId", "$ref": "StyleSheetId", "optional": true, "description": "Identifier of the stylesheet containing this object (if exists)." },
                        { "name": "mediaList", "type": "array", "items": { "$ref": "MediaQuery" }, "optional": true, "experimental": true, "description": "Array of media queries." }
                    ],
                    "description": "CSS media rule descriptor."
                },
                {
                    "id": "MediaQuery",
                    "type": "object",
                    "properties": [
                        { "name": "expressions", "type": "array", "items": { "$ref": "MediaQueryExpression" }, "description": "Array of media query expressions." },
                        { "name": "active", "type": "boolean", "description": "Whether the media query condition is satisfied." }
                    ],
                    "description": "Media query descriptor.",
                    "experimental": true
                },
                {
                    "id": "MediaQueryExpression",
                    "type": "object",
                    "properties": [
                        { "name": "value", "type": "number", "description": "Media query expression value."},
                        { "name": "unit", "type": "string", "description": "Media query expression units."},
                        { "name": "feature", "type": "string", "description": "Media query expression feature."},
                        { "name": "valueRange", "$ref": "SourceRange", "optional": true, "description": "The associated range of the value text in the enclosing stylesheet (if available)." },
                        { "name": "computedLength", "type": "number", "optional": true, "description": "Computed length of media query expression (if applicable)."}
                    ],
                    "description": "Media query expression descriptor.",
                    "experimental": true
                },
                {
                    "id": "PlatformFontUsage",
                    "type": "object",
                    "properties": [
                        { "name": "familyName", "type": "string", "description": "Font's family name reported by platform."},
                        { "name": "isCustomFont", "type": "boolean", "description": "Indicates if the font was downloaded or resolved locally."},
                        { "name": "glyphCount", "type": "number", "description": "Amount of glyphs that were rendered with this font."}
                    ],
                    "description": "Information about amount of glyphs that were rendered with given font.",
                    "experimental": true
                },
                {
                    "id": "CSSKeyframesRule",
                    "type": "object",
                    "properties": [
                        { "name": "animationName", "$ref": "Value", "description": "Animation name." },
                        { "name": "keyframes", "type": "array", "items": { "$ref": "CSSKeyframeRule" }, "description": "List of keyframes." }
                    ],
                    "description": "CSS keyframes rule representation."
                },
                {
                    "id": "CSSKeyframeRule",
                    "type": "object",
                    "properties": [
                        { "name": "styleSheetId", "$ref": "StyleSheetId", "optional": true, "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from." },
                        { "name": "origin", "$ref": "StyleSheetOrigin", "description": "Parent stylesheet's origin."},
                        { "name": "keyText", "$ref": "Value", "description": "Associated key text." },
                        { "name": "style", "$ref": "CSSStyle", "description": "Associated style declaration." }
                    ],
                    "description": "CSS keyframe rule representation."
                },
                {
                    "id": "StyleDeclarationEdit",
                    "type": "object",
                    "properties": [
                        { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "The css style sheet identifier." },
                        { "name": "range", "$ref": "SourceRange", "description": "The range of the style text in the enclosing stylesheet." },
                        { "name": "text", "type": "string", "description": "New style text."}
                    ],
                    "description": "A descriptor of operation to mutate style declaration text."
                }
            ],
            "commands": [
                {
                    "name": "enable",
                    "async": true,
                    "description": "Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received."
                },
                {
                    "name": "disable",
                    "description": "Disables the CSS agent for the given page."
                },
                {
                    "name": "getMatchedStylesForNode",
                    "parameters": [
                        { "name": "nodeId", "$ref": "DOM.NodeId" }
                    ],
                    "returns": [
                        { "name": "inlineStyle", "$ref": "CSSStyle", "optional": true, "description": "Inline style for the specified DOM node." },
                        { "name": "attributesStyle", "$ref": "CSSStyle", "optional": true, "description": "Attribute-defined element style (e.g. resulting from \"width=20 height=100%\")."},
                        { "name": "matchedCSSRules", "type": "array", "items": { "$ref": "RuleMatch" }, "optional": true, "description": "CSS rules matching this node, from all applicable stylesheets." },
                        { "name": "pseudoElements", "type": "array", "items": { "$ref": "PseudoElementMatches" }, "optional": true, "description": "Pseudo style matches for this node." },
                        { "name": "inherited", "type": "array", "items": { "$ref": "InheritedStyleEntry" }, "optional": true, "description": "A chain of inherited styles (from the immediate node parent up to the DOM tree root)." },
                        { "name": "cssKeyframesRules", "type": "array", "items": { "$ref": "CSSKeyframesRule" }, "optional": true, "description": "A list of CSS keyframed animations matching this node." }
                    ],
                    "description": "Returns requested styles for a DOM node identified by <code>nodeId</code>."
                },
                {
                    "name": "getInlineStylesForNode",
                    "parameters": [
                        { "name": "nodeId", "$ref": "DOM.NodeId" }
                    ],
                    "returns": [
                        { "name": "inlineStyle", "$ref": "CSSStyle", "optional": true, "description": "Inline style for the specified DOM node." },
                        { "name": "attributesStyle", "$ref": "CSSStyle", "optional": true, "description": "Attribute-defined element style (e.g. resulting from \"width=20 height=100%\")."}
                    ],
                    "description": "Returns the styles defined inline (explicitly in the \"style\" attribute and implicitly, using DOM attributes) for a DOM node identified by <code>nodeId</code>."
                },
                {
                    "name": "getComputedStyleForNode",
                    "parameters": [
                        { "name": "nodeId", "$ref": "DOM.NodeId" }
                    ],
                    "returns": [
                        { "name": "computedStyle", "type": "array", "items": { "$ref": "CSSComputedStyleProperty" }, "description": "Computed style for the specified DOM node." }
                    ],
                    "description": "Returns the computed style for a DOM node identified by <code>nodeId</code>."
                },
                {
                    "name": "getPlatformFontsForNode",
                    "parameters": [
                        { "name": "nodeId", "$ref": "DOM.NodeId" }
                    ],
                    "returns": [
                        { "name": "fonts", "type": "array", "items": { "$ref": "PlatformFontUsage" }, "description": "Usage statistics for every employed platform font." }
                    ],
                    "description": "Requests information about platform fonts which we used to render child TextNodes in the given node.",
                    "experimental": true
                },
                {
                    "name": "getStyleSheetText",
                    "parameters": [
                        { "name": "styleSheetId", "$ref": "StyleSheetId" }
                    ],
                    "returns": [
                        { "name": "text", "type": "string", "description": "The stylesheet text." }
                    ],
                    "description": "Returns the current textual content and the URL for a stylesheet."
                }
            ],
            "events": [
                {
                    "name": "mediaQueryResultChanged",
                    "description": "Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features."
                },
                {
                    "name": "fontsUpdated",
                    "description": "Fires whenever a web font gets loaded."
                },
                {
                    "name": "styleSheetChanged",
                    "parameters": [
                        { "name": "styleSheetId", "$ref": "StyleSheetId" }
                    ],
                    "description": "Fired whenever a stylesheet is changed as a result of the client operation."
                },
                {
                    "name": "styleSheetAdded",
                    "parameters": [
                        { "name": "header", "$ref": "CSSStyleSheetHeader", "description": "Added stylesheet metainfo." }
                    ],
                    "description": "Fired whenever an active document stylesheet is added."
                },
                {
                    "name": "styleSheetRemoved",
                    "parameters": [
                        { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "Identifier of the removed stylesheet." }
                    ],
                    "description": "Fired whenever an active document stylesheet is removed."
                },
                {
                    "name": "layoutEditorChange",
                    "parameters": [
                        { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "Identifier of the stylesheet where the modification occurred." },
                        { "name": "changeRange", "$ref": "SourceRange", "description": "Range where the modification occurred." }
                    ]
                }
            ]
    }]
}
