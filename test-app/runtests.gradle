def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
def runOnDevice = project.hasProperty("runOnDevice")
def runOnDeviceOrEmulator = runOnDevice ? "-d" : "-e"

def onlyX86 = project.hasProperty("onlyX86")
def useCCache = project.hasProperty("useCCache")

// task deleteDist(type: Delete) {
//     doFirst {
//         delete "$rootDir/dist"
//     }
// }

task waitForEmulatorToStart(type: Exec) {
    doFirst {
        println "Waiting for emulator to start..."

        if (isWinOs) {
            commandLine "cmd", "/c", "node", "$rootDir\\tools\\make_sure_emulator_is_ready.js", runOnDeviceOrEmulator
        } else {
            commandLine "node", "$rootDir/tools/make_sure_emulator_is_ready.js", runOnDeviceOrEmulator
        }
    }
}

def getBuildArguments = { ->
    def arguments = []
    if (isWinOs) {
        arguments += ["cmd", "/c", "gradlew"]
    } else {
        arguments.add("./gradlew")
    }
    arguments.add(":app:installDebug")
    if (onlyX86) {
        arguments.add("-PonlyX86")
    }
    if (useCCache) {
        arguments.add("-PuseCCache")
    }

    arguments.add("-PuseKotlin=true")

    return arguments
}

task installApk(type: Exec) {
    doFirst {
        println "Attempting to install buit apk"
        commandLine getBuildArguments()
    }
}

task runAdbAsRoot(type: Exec) {
    doFirst {
        println "Running adb as root"

        if (isWinOs) {
            commandLine "cmd", "/c", "adb", "-e", "root"
        } else {
            commandLine "adb", "-e", "root"
        }
        sleep(10 * 1000) // wait 10s to make sure adb properly restarts, otherwise error: closed might happen on next command
    }
}

task deletePreviousResultXml(type: Exec) {
    doFirst {
        println "Removing previous android_unit_test_results.xml"

        if (isWinOs) {
            commandLine "cmd", "/c", "adb", runOnDeviceOrEmulator, "shell", "run-as", "com.tns.testapplication", "rm", "-f", "/data/data/com.tns.testapplication/android_unit_test_results.xml", "||", "true"
        } else {
            commandLine "bash", "-c", "adb " + runOnDeviceOrEmulator + " shell 'run-as com.tns.testapplication rm -f /data/data/com.tns.testapplication/android_unit_test_results.xml || true'"
        }
    }
}

task startInstalledApk(type: Exec) {
    doFirst {
        println "Starting test application"

        if (isWinOs) {
            commandLine "cmd", "/c", "adb", runOnDeviceOrEmulator, "shell", "am", "start", "-n", "com.tns.testapplication/com.tns.NativeScriptActivity", "-a", "android.intent.action.MAIN", "-c", "android.intent.category.LAUNCHER"
        } else {
            commandLine "adb", runOnDeviceOrEmulator, "shell", "am", "start", "-n", "com.tns.testapplication/com.tns.NativeScriptActivity", "-a", "android.intent.action.MAIN", "-c", "android.intent.category.LAUNCHER"
        }
    }
}

task createDistFolder {
    doLast {
        def distDir = file("$rootDir/dist")
        distDir.mkdirs()
    }
}

task waitForTestsToComplete {
    doLast {
        println "Waiting for tests to complete..."
        Thread.sleep(15000) // Wait 15 seconds for tests to run
    }
}

task verifyResults(type: Exec) {
    doFirst {
        println "Verifying test results from console output..."
        
        if (isWinOs) {
            commandLine "cmd", "/c", "node", "$rootDir\\tools\\check_console_test_results.js"
        } else {
            commandLine "node", "$rootDir/tools/check_console_test_results.js"
        }
    }
}

task runtests {
    dependsOn startInstalledApk
}

// waitForEmulatorToStart.dependsOn(deleteDist)
runAdbAsRoot.dependsOn(waitForEmulatorToStart)
deletePreviousResultXml.dependsOn(runAdbAsRoot)
installApk.dependsOn(deletePreviousResultXml)
startInstalledApk.dependsOn(installApk)
createDistFolder.dependsOn(startInstalledApk)
waitForTestsToComplete.dependsOn(createDistFolder)
verifyResults.dependsOn(waitForTestsToComplete)

task runtestsAndVerifyResults {
    dependsOn verifyResults
}