def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
def runOnDevice = project.hasProperty("runOnDevice");
def runOnDeviceOrEmulator = runOnDevice ? "-d" : "-e";

def onlyX86 = project.hasProperty("onlyX86")
def useCCache = project.hasProperty("useCCache")

// task deleteDist(type: Delete) {
//     doFirst {
//         delete "$rootDir/dist"
//     }
// }

task waitForEmulatorToStart(type: Exec) {
    doFirst {
        println "Waiting for emulator to start..."

        if (isWinOs) {
            commandLine "cmd", "/c", "node", "$rootDir\\tools\\make_sure_emulator_is_ready.js", runOnDeviceOrEmulator
        } else {
            commandLine "node", "$rootDir/tools/make_sure_emulator_is_ready.js", runOnDeviceOrEmulator
        }
    }
}

def getBuildArguments = { ->
    def arguments = []
    if (isWinOs) {
        arguments += ["cmd", "/c", "gradlew"]
    } else {
        arguments.push("./gradlew")
    }
    arguments.push(":app:installDebug")
    if (onlyX86) {
        arguments.push("-PonlyX86")
    }
    if (useCCache) {
        arguments.push("-PuseCCache")
    }
    return arguments;
}

task installApk(type: Exec) {
        doFirst {
            println "Attempting to install buit apk"
            commandLine getBuildArguments()
        }
}

task runAdbAsRoot(type: Exec) {
    doFirst {
        println "Removing previous android_unit_test_results.xml"

        if (isWinOs) {
            commandLine "cmd", "/c", "adb", "-e" , "root"
        } else {
            commandLine "adb", "-e" , "root"
        }
    }
}

task deletePreviousResultXml(type: Exec) {
    doFirst {
        println "Removing previous android_unit_test_results.xml"

        if (isWinOs) {
            commandLine "cmd", "/c", "adb", runOnDeviceOrEmulator, "-e" , "shell", "rm", "-rf", "/data/data/com.tns.testapplication/android_unit_test_results.xml"
        } else {
            commandLine "adb", runOnDeviceOrEmulator, "-e", "shell", "rm", "-rf", "/data/data/com.tns.testapplication/android_unit_test_results.xml"
        }
    }
}

task startInstalledApk(type: Exec) {
    doFirst {
        println "Starting test application"

        if (isWinOs) {
            commandLine "cmd", "/c", "adb", runOnDeviceOrEmulator, "-e", "shell", "am", "start", "-n", "com.tns.testapplication/com.tns.NativeScriptActivity", "-a", "android.intent.action.MAIN", "-c", "android.intent.category.LAUNCHER"
        } else {
            commandLine "adb", runOnDeviceOrEmulator, "-e" , "shell", "am", "start", "-n", "com.tns.testapplication/com.tns.NativeScriptActivity", "-a", "android.intent.action.MAIN", "-c", "android.intent.category.LAUNCHER"
        }
    }
}

task createDistFolder {
    doLast {
        def distDir = file("$rootDir/dist")
        distDir.mkdirs()
    }
}

task waitForUnitTestResultFile(type: Exec) {
    doFirst {
        println "Waiting for tests to finish..."

        if (isWinOs) {
            commandLine "cmd", "/c", "node", "$rootDir\\tools\\try_to_find_test_result_file.js", runOnDeviceOrEmulator
        } else {
            commandLine "node", "$rootDir/tools/try_to_find_test_result_file.js", runOnDeviceOrEmulator
        }
    }
}

task copyResultToDist(type: Copy) {
    from "$rootDir/android_unit_test_results.xml"
    into "$rootDir/dist"
}

task deleteRootLevelResult(type: Delete) {
    delete "$rootDir/android_unit_test_results.xml"
}

task verifyResults(type: Exec) {
    doFirst {
        if (isWinOs) {
            commandLine "cmd", "/c", "node", "$rootDir\\tools\\check_if_tests_passed.js", "$rootDir\\dist\\android_unit_test_results.xml"
        } else {
            commandLine "node", "$rootDir/tools/check_if_tests_passed.js", "$rootDir/dist/android_unit_test_results.xml"
        }
    }
}

task runtests {
    dependsOn deleteRootLevelResult
}

// waitForEmulatorToStart.dependsOn(deleteDist)
runAdbAsRoot.dependsOn(waitForEmulatorToStart)
deletePreviousResultXml.dependsOn(runAdbAsRoot)
installApk.dependsOn(deletePreviousResultXml)
startInstalledApk.dependsOn(installApk)
createDistFolder.dependsOn(startInstalledApk)
waitForUnitTestResultFile.dependsOn(createDistFolder)
copyResultToDist.dependsOn(waitForUnitTestResultFile)
deleteRootLevelResult.dependsOn(copyResultToDist)
verifyResults.dependsOn(runtests)

task runtestsAndVerifyResults {
    dependsOn verifyResults
}