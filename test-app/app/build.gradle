/*
* run from dir: test-app/
* 	run on emulator: ./gradlew runtests //default
* 	run on device: ./gradlew runtests -PrunOnDevice
*	emulatorName: -PemulatorName
*
*/

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')

apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = "25.0.2"

        defaultConfig.with {
            applicationId = "com.tns.android_runtime_testapp"
            minSdkVersion.apiLevel = 17
            targetSdkVersion.apiLevel = 22
            versionCode = 1
            versionName = "1.0"
        }

        lintOptions.with {
            abortOnError = false
        }
    }

//    android.ndk {
//        moduleName = "test-app-dummy-native-lib"
//    }

    android.buildTypes {
        release {
            minifyEnabled = false
            proguardFiles.add(file('proguard-rules.txt'))
        }
    }
}

dependencies {
	def supportVer = "23.3.0"
	compile project(':runtime')
	compile fileTree(include: ['*.jar'], dir: 'libs')

	compile "com.android.support:support-v4:$supportVer"
	compile "com.android.support:appcompat-v7:$supportVer"
	compile "com.android.support:design:$supportVer"

	testCompile 'junit:junit:4.12'
}

task startEmulator(type: Exec) {
	doFirst {
		def emulator = "";
		if(project.hasProperty("emulatorName")) {
			emulator = emulatorName
		}
		if(isWinOs) {
			commandLine "cmd", "/c", "node", "$rootDir\\tools\\start-kill-emulator.js", "start", emulator
		}
		else {
			commandLine "node", "$rootDir/tools/start-kill-emulator.js", "start", emulator
		}
	}
}

task deleteDist (type: Delete) {
	doFirst {
		delete "$rootDir/dist"
	}
}

task installApk (type: Exec) {
	doFirst {
		println "Attempting to install buit apk"

		if(isWinOs) {
			commandLine "cmd", "/c", "node", "$rootDir\\tools\\deploy-apk.js", "$rootDir\\app\\build\\outputs\\apk\\app-debug.apk"
		}
		else {
			commandLine "node", "$rootDir/tools/deploy-apk.js", "$rootDir/app/build/outputs/apk/app-debug.apk"
		}
	}
    
    doLast {
        println "Install result:" + execResult
    }
}

task deletePreviousResultXml (type: Exec) {
	doFirst {
		println "Removing previous android_unit_test_results.xml"
		if(isWinOs) {
			commandLine "cmd", "/c", "node", "$rootDir\\tools\\delete-previous-results.js"
		}
		else {
			commandLine "node", "$rootDir/tools/delete-previous-results.js"
		}
	}
}

task startInstalledApk (type: Exec) {
	doFirst {
		println "Starting test application"
		
		if(isWinOs) {
			commandLine "node", "$rootDir\\tools\\start-installed-apk.js"
		}
		else {
			commandLine "node", "$rootDir/tools/start-installed-apk.js"
		}
	}
}

task createDistFolder {
	doLast {
		def distDir = file("$rootDir/dist")
		distDir.mkdirs()
	}
}

task waitForUnitTestResultFile (type: Exec) {	
	doFirst {
		println "Waiting for tests to finish..."
		
		if(isWinOs) {
			commandLine "cmd", "/c", "node", "$rootDir\\tools\\try_to_find_test_result_file.js"
		}
		else {
			commandLine "node", "$rootDir/tools/try_to_find_test_result_file.js"
		}
	}
}

task copyResultToDist (type: Copy) {	
	from "$rootDir/app/android_unit_test_results.xml"
	into "$rootDir/dist"
}

task deleteRootLevelResult (type: Delete) {
	delete "$rootDir/app/android_unit_test_results.xml"
}

task killEmulators(type: Exec) {
	doFirst {
		if(isWinOs) {
			commandLine "cmd", "/c", "node", "$rootDir\\tools\\start-kill-emulator.js", "kill"
		}
		else {
			commandLine "node", "$rootDir/tools/start-kill-emulator.js", "kill"
		}
	}
}

deleteDist.dependsOn(startEmulator)
deletePreviousResultXml.dependsOn(deleteDist)
installApk.dependsOn(deletePreviousResultXml)
startInstalledApk.dependsOn(installApk)
createDistFolder.dependsOn(startInstalledApk)
waitForUnitTestResultFile.dependsOn(createDistFolder)
copyResultToDist.dependsOn(waitForUnitTestResultFile)
deleteRootLevelResult.dependsOn(copyResultToDist)
killEmulators.dependsOn(deleteRootLevelResult)

task runtests {
	dependsOn killEmulators
}

tasks.whenTaskAdded { task ->

    if (task.getName() == "assembleDebug")
	{
		runtests.dependsOn assembleDebug
	} 
}
