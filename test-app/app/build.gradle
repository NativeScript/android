apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.tns.testapplication"
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    releaseCompile project(path: ':runtime', configuration: 'release')
    debugCompile project(path: ':runtime', configuration: 'debug')

    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.0.2'
    compile 'com.android.support:design:26.0.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
}

def isWinOs = System.properties['os.name'].toLowerCase().contains('windows')
def runOnDevice = project.hasProperty("runOnDevice");
def runOnDeviceOrEmulator = runOnDevice ? "-d" : "-e";

task deleteDist(type: Delete) {
    doFirst {
        delete "$rootDir/dist"
    }
}

task waitForEmulatorToStart(type: Exec) {
    doFirst {
        println "Waiting for emulator to start..."

        if (isWinOs) {
            commandLine "cmd", "/c", "node", "$rootDir\\tools\\make_sure_emulator_is_ready.js", runOnDeviceOrEmulator
        } else {
            commandLine "node", "$rootDir/tools/make_sure_emulator_is_ready.js", runOnDeviceOrEmulator
        }
    }
}

task runAdbAsRoot(type: Exec) {
    doFirst {
        println "Running adb as root"

        if (isWinOs) {
            commandLine "cmd", "/c", "adb", "root"
        } else {
            commandLine "adb", "root"
        }
    }
}

task deletePreviousResultXml(type: Exec) {
    doFirst {
        println "Removing previous android_unit_test_results.xml"

        if (isWinOs) {
            commandLine "cmd", "/c", "adb", "root", "&&", "adb", runOnDeviceOrEmulator, "shell", "rm", "-rf", "/data/data/com.tns.testapplication/android_unit_test_results.xml"
        } else {
            commandLine "adb", "root", "&&", "adb", runOnDeviceOrEmulator, "shell", "rm", "-rf", "/data/data/com.tns.testapplication/android_unit_test_results.xml"
        }
    }
}

task installApk(type: Exec) {
    doFirst {
        println "Attempting to install built apk"

        if (isWinOs) {
            commandLine "cmd", "/c", "node", "$rootDir\\tools\\deploy-apk.js", "$rootDir\\app\\build\\outputs\\apk\\app-debug.apk", runOnDeviceOrEmulator
        } else {
            commandLine "node", "$rootDir/tools/deploy-apk.js", "$rootDir/app/build/outputs/apk/app-debug.apk", runOnDeviceOrEmulator
        }
    }

    doLast {
        println "Install result:" + execResult
    }
}

task startInstalledApk(type: Exec) {
    doFirst {
        println "Starting test application"

        if (isWinOs) {
            commandLine "cmd", "/c", "adb", runOnDeviceOrEmulator, "shell", "am", "start", "-n", "com.tns.testapplication/com.tns.NativeScriptActivity", "-a", "android.intent.action.MAIN", "-c", "android.intent.category.LAUNCHER"
        } else {
            commandLine "adb", runOnDeviceOrEmulator, "shell", "am", "start", "-n", "com.tns.testapplication/com.tns.NativeScriptActivity", "-a", "android.intent.action.MAIN", "-c", "android.intent.category.LAUNCHER"
        }
    }
}

task createDistFolder {
    doLast {
        def distDir = file("$rootDir/dist")
        distDir.mkdirs()
    }
}

task waitForUnitTestResultFile(type: Exec) {
    doFirst {
        println "Waiting for tests to finish..."

        if (isWinOs) {
            commandLine "cmd", "/c", "node", "$rootDir\\tools\\try_to_find_test_result_file.js", runOnDeviceOrEmulator
        } else {
            commandLine "node", "$rootDir/tools/try_to_find_test_result_file.js", runOnDeviceOrEmulator
        }
    }
}

task copyResultToDist(type: Copy) {
    from "$rootDir/app/android_unit_test_results.xml"
    into "$rootDir/dist"
}

task deleteRootLevelResult(type: Delete) {
    delete "$rootDir/app/android_unit_test_results.xml"
}

waitForEmulatorToStart.dependsOn(deleteDist)
runAdbAsRoot.dependsOn(waitForEmulatorToStart)
deletePreviousResultXml.dependsOn(runAdbAsRoot)
installApk.dependsOn(deletePreviousResultXml)
startInstalledApk.dependsOn(installApk)
createDistFolder.dependsOn(startInstalledApk)
waitForUnitTestResultFile.dependsOn(createDistFolder)
copyResultToDist.dependsOn(waitForUnitTestResultFile)
deleteRootLevelResult.dependsOn(copyResultToDist)

task runtests {
    dependsOn deleteRootLevelResult
}

tasks.whenTaskAdded { task ->

    if (task.getName() == "assembleDebug") {
        runtests.dependsOn assembleDebug
    }
}
