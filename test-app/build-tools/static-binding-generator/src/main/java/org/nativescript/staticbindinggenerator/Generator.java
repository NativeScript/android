package org.nativescript.staticbindinggenerator;

import com.google.googlejavaformat.java.Formatter;
import com.google.googlejavaformat.java.FormatterException;

import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.nativescript.staticbindinggenerator.files.FileSystemHelper;
import org.nativescript.staticbindinggenerator.files.impl.ClassesCollection;
import org.nativescript.staticbindinggenerator.files.impl.FileSystemHelperImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.checkers.AndroidClassChecker;
import org.nativescript.staticbindinggenerator.generating.parsing.checkers.ImplementationObjectChecker;
import org.nativescript.staticbindinggenerator.generating.parsing.checkers.impl.AndroidClassCheckerImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.checkers.impl.ImplementationObjectCheckerImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.generics.GenericHierarchyView;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.generics.GenericParameters;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.generics.GenericsAwareClassHierarchyParser;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.generics.impl.GenericSignatureReader;
import org.nativescript.staticbindinggenerator.generating.parsing.classes.hierarchy.generics.impl.GenericsAwareClassHierarchyParserImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.InheritedMethodsCollector;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.InheritedMethodsView;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.JavaMethod;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.ReifiedJavaMethod;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.impl.InheritedMethodsCollectorImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.impl.JavaMethodImpl;
import org.nativescript.staticbindinggenerator.generating.parsing.methods.impl.MethodSignatureReifier;
import org.nativescript.staticbindinggenerator.generating.writing.ClassWriter;
import org.nativescript.staticbindinggenerator.generating.writing.FieldsWriter;
import org.nativescript.staticbindinggenerator.generating.writing.ImportsWriter;
import org.nativescript.staticbindinggenerator.generating.writing.MethodsWriter;
import org.nativescript.staticbindinggenerator.generating.writing.PackageNameWriter;
import org.nativescript.staticbindinggenerator.generating.writing.impl.ClassWriterImpl;
import org.nativescript.staticbindinggenerator.generating.writing.impl.FieldsWriterImpl;
import org.nativescript.staticbindinggenerator.generating.writing.impl.ImportsWriterImpl;
import org.nativescript.staticbindinggenerator.generating.writing.impl.MethodsWriterImpl;
import org.nativescript.staticbindinggenerator.generating.writing.impl.PackageNameWriterImpl;
import org.nativescript.staticbindinggenerator.naming.BcelNamingUtil;
import org.nativescript.staticbindinggenerator.naming.JavaClassNames;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Generator {

    private static final String JAVA_EXT = ".java";

    private static final String DEFAULT_PACKAGE_NAME = "com.tns.gen";

    private static final String LINE_SEPARATOR = System.getProperty("line.separator");

    public static final String AUTO_GENERATED_FILE_PROLOGUE =
            "/* AUTO-GENERATED FILE. DO NOT MODIFY." + LINE_SEPARATOR +
                    " * This class was automatically generated by the" + LINE_SEPARATOR +
                    " * static binding generator from the resources it found." + LINE_SEPARATOR +
                    " * Please do not modify by hand." + LINE_SEPARATOR +
                    " */" + LINE_SEPARATOR;

    private final File outputDir;
    private final List<DataRow> libs;
    private final Map<String, JavaClass> classes;
    private final FileSystemHelper fileSystemHelper;
    private final boolean suppressCallJSMethodExceptions;
    private final AndroidClassChecker androidClassChecker;
    private Set<String> nonPublicNestedClasses;

    public Generator(File outputDir, List<DataRow> libs) throws IOException {
        this(outputDir, libs, false);
    }

    public Generator(File outputDir, List<DataRow> libs, boolean suppressCallJSMethodExceptions) throws IOException {
        this.outputDir = outputDir;
        this.libs = libs;
        this.fileSystemHelper = new FileSystemHelperImpl(InputParameters.getCurrent().getThrowOnError());
        ClassesCollection classesCollection = readClasses(libs);
        this.classes = classesCollection.getRegularClasses();
        this.nonPublicNestedClasses = classesCollection.getNonPublicNestedClasses();
        androidClassChecker = new AndroidClassCheckerImpl(classes);
        this.suppressCallJSMethodExceptions = suppressCallJSMethodExceptions;
    }

    public void writeBindings(String filename) throws IOException, ClassNotFoundException {
        fileSystemHelper.cleanPreviouslyAutoGeneratedSbgFiles(this.outputDir);
        Binding[] bindings = generateBindings(filename);
        Set<File> writtenFiles = new HashSet<File>();
        for (Binding b : bindings) {
            if (writtenFiles.add(b.getFile())) {
                try (PrintStream ps = new PrintStream(b.getFile())) {
                    ps.append(AUTO_GENERATED_FILE_PROLOGUE);
                    ps.append(b.getContent());
                }
                // A file with that name has already been written
            } else {
                // Compare text contents for equality
                String content = new String(Files.readAllBytes(Paths.get(b.getFile().toString())));
                if (content.equals(b.getContent())) {
                    System.out.println("Warning: File already exists. This could mean the same code has been parsed more than once from two or more different files. \nFile:" + b.getFile());
                } else {
                    throw new IOException("File already exists. This may lead to undesired behavior.\nPlease change the name of one of the extended classes.\nFile:" + b.getFile() + " Class: " + b.getClassname());
                }
            }
        }
    }

    public Binding[] generateBindings(String filename) throws IOException, ClassNotFoundException {
        try {
            List<DataRow> rows = getRows(filename);
            Binding[] generatedFiles = processRows(rows);

            return generatedFiles;
        } catch (FileNotFoundException exception) {
            String jsParserPath = Paths.get(System.getProperty("user.dir"), "jsparser", "js_parser.js").toString();
            throw new IOException(String.format("Couldn't find '%s' bindings input file. Most probably there's an error in the JS Parser execution. You can run JS Parser with verbose logging by executing \"node '%s' enableErrorLogging\".", filename, jsParserPath));
        }
    }

    public Binding generateBinding(DataRow dataRow, HashSet<String> interfaceNames) throws ClassNotFoundException {
        JavaClass clazz = getClass(dataRow.getBaseClassname());
        if (!canClassBeExtended(clazz)) {
            return null;
        }

        boolean hasSpecifiedName = !dataRow.getFilename().isEmpty();
        String packageName = hasSpecifiedName ? getBaseDir(dataRow.getFilename()) : (DEFAULT_PACKAGE_NAME + "." + clazz.getPackageName());
        String baseDirPath = packageName.replace('.', '/');

        File baseDir = new File(outputDir, baseDirPath);
        if (!baseDir.exists()) {
            baseDir.mkdirs();
        }

        String name = "";
        Boolean isInterface = clazz.isInterface();

        if (hasSpecifiedName) {
            name = getSimpleClassname(dataRow.getFilename());
        } else {
            if (isInterface) {
                name = getSimpleClassname(clazz.getClassName());
            } else {
                name = getSimpleClassname(clazz.getClassName().replace("$", "_")) + "_";
                // name of the class: last portion of the full file name + line + column + variable name
                String[] lastFilePathPart = dataRow.getFile().split("_");
                name += lastFilePathPart[lastFilePathPart.length - 1] + "_" + dataRow.getLine() + "_" + dataRow.getColumn() + "_" + dataRow.getNewClassName();
            }
        }

        if (isInterface && interfaceNames.contains(name)) {
            return null;
        } else if (isInterface) {
            interfaceNames.add(name);
        }

        String normalizedName = getNormalizedName(name);

        Writer w = new Writer();

        writeBinding(w, dataRow, clazz, packageName, name);
        String classname = dataRow.getFilename();

        try {
            String formattedSource = new Formatter().formatSource(w.toString());
            return new Binding(new File(baseDir, normalizedName + JAVA_EXT), formattedSource, classname);
        } catch (FormatterException e) {
            return new Binding(new File(baseDir, normalizedName + JAVA_EXT), w.toString(), classname);
        }
    }

    private boolean canClassBeExtended(JavaClass javaClass) {
        if (javaClass.isInterface() && (javaClass.isProtected() || javaClass.isPublic())) {
            return true;
        }

        if (javaClass.isFinal() || (!javaClass.isProtected() && !javaClass.isPublic())) {
            return false;
        }

        nextMethod:
        for (Method method : javaClass.getMethods()) {
            if (method.getName().equals("<init>")
                    && !method.isStatic()
                    && (method.isPublic() || method.isProtected())) {

                return true;
            }
        }

        return false;
    }

    public Binding generateBinding(DataRow dataRow) throws ClassNotFoundException {
        return generateBinding(dataRow, new HashSet<>());
    }

    public static List<DataRow> getRows(String filename) throws IOException {
        List<DataRow> rows = new ArrayList<DataRow>();
        BufferedReader br = null;
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(filename)));
            String line;
            while ((line = br.readLine()) != null) {
                DataRow row = new DataRow(line);
                rows.add(row);
            }
        } finally {
            if (br != null) {
                br.close();
            }
        }
        return rows;
    }

    private Binding[] processRows(List<DataRow> rows) throws ClassNotFoundException {
        ArrayList<Binding> bindings = new ArrayList<Binding>();
        HashSet<String> interfaceNames = new HashSet<String>();

        for (DataRow dataRow : rows) {
            String classname = dataRow.getBaseClassname();
            boolean isJavaExtend = classes.containsKey(classname);
            if (isJavaExtend) {
                Binding binding = generateBinding(dataRow, interfaceNames);

                if (binding != null) {
                    bindings.add(binding);
                }
            }
        }

        return bindings.toArray(new Binding[bindings.size()]);
    }

    private String getNormalizedName(String filename) {
        StringBuilder sb = new StringBuilder(filename.length());
        for (char ch : filename.toCharArray()) {
            char c = Character.isJavaIdentifierPart(ch) ? ch : '_';
            sb.append(c);
        }

        return sb.toString();
    }

    private ClassesCollection readClasses(List<DataRow> libs) {
        Map<String, JavaClass> map = new HashMap<String, JavaClass>();
        Set<String> nonPublicNestedClasses = new HashSet<>();
        if (libs != null) {
            for (DataRow dr : libs) {
                String lib = dr.getRow();
                File f = new File(lib);
                ClassesCollection classes = f.isFile() ? fileSystemHelper.readClassesFromJar(lib) : fileSystemHelper.readClassesFromDirectory(lib);
                map.putAll(classes.getRegularClasses());
                nonPublicNestedClasses.addAll(classes.getNonPublicNestedClasses());
            }
        }
        return new ClassesCollection(map, nonPublicNestedClasses);
    }


    private String getBaseDir(String classname) {
        int idx = classname.lastIndexOf('.');
        return classname.substring(0, idx);
    }

    private String getSimpleClassname(String classname) {
        int idx = classname.lastIndexOf('.');
        return classname.substring(idx + 1).replace("$", "_");
    }

    private void writeBinding(Writer w, DataRow dataRow, JavaClass clazz, String packageName, String name) {
        GenericsAwareClassHierarchyParser genericsAwareClassHierarchyParser = new GenericsAwareClassHierarchyParserImpl(new GenericSignatureReader(), classes);
        List<JavaClass> userImplementedInterfaces = getInterfacesFromCache(Arrays.asList(dataRow.getInterfaces()));

        if (clazz.isInterface()) {
            userImplementedInterfaces.add(clazz);
            clazz = getClass(JavaClassNames.BASE_JAVA_CLASS_NAME);
        }

        GenericHierarchyView genView = createExtendedClassGenericHierarchyView(genericsAwareClassHierarchyParser, clazz);
        Map<JavaClass, GenericHierarchyView> interfaceGenericHierarchyViews = createInterfaceGenericHierarchyViews(genericsAwareClassHierarchyParser, userImplementedInterfaces);

        writePackageNameToWriter(w, packageName);
        writeImportsToWriter(w, clazz, packageName);
        writeClassBeginningToWriter(w, clazz, userImplementedInterfaces, name, dataRow, genView, interfaceGenericHierarchyViews);
        writeFieldsToWriter(w, clazz);
        writeConstructorsToWriter(w, clazz, dataRow, name, genView);
        writeMethodsToWriter(w, genView, interfaceGenericHierarchyViews, clazz, Arrays.asList(dataRow.getMethods()), userImplementedInterfaces, packageName);
        writeClassEndToWriter(w);
    }

    private Map<JavaClass, GenericHierarchyView> createInterfaceGenericHierarchyViews(GenericsAwareClassHierarchyParser genericsAwareClassHierarchyParser, List<JavaClass> implementedInterfaces) {
        Map<JavaClass, GenericHierarchyView> interfaceGenericHierarchyViews = new HashMap<>(implementedInterfaces.size());

        for (JavaClass implementedInterface : implementedInterfaces) {
            GenericHierarchyView genericHierarchyView = genericsAwareClassHierarchyParser.getClassHierarchy(implementedInterface);
            interfaceGenericHierarchyViews.put(implementedInterface, genericHierarchyView);
        }

        return interfaceGenericHierarchyViews;
    }

    private GenericHierarchyView createExtendedClassGenericHierarchyView(GenericsAwareClassHierarchyParser genericsAwareClassHierarchyParser, JavaClass extendedClass) {
        return genericsAwareClassHierarchyParser.getClassHierarchy(extendedClass);
    }

    private void writeClassBeginningToWriter(Writer writer, JavaClass clazz, List<JavaClass> implementedInterfaces, String generatedClassName, DataRow dataRow, GenericHierarchyView genericHierarchyView, Map<JavaClass, GenericHierarchyView> interfaceGenericHierarchyViews) {
        ClassWriter classWriter = new ClassWriterImpl(writer);

        boolean hasCustomJsName = !dataRow.getFilename().isEmpty();

        List<String> implementedInterfacesNames = mapNamesWithGenericArgumentsIfNecessary(implementedInterfaces, interfaceGenericHierarchyViews);
        String extendedClassName = mapNameWithGenericArgumentsIfNecessary(clazz, genericHierarchyView);

        if (hasCustomJsName) {
            classWriter.writeBeginningOfNamedChildClass(generatedClassName, dataRow.getJsFilename(), extendedClassName, implementedInterfacesNames);
        } else {
            classWriter.writeBeginningOfChildClass(generatedClassName, extendedClassName, implementedInterfacesNames);
        }
    }

    private String mapNameWithGenericArgumentsIfNecessary(JavaClass extendedClass, GenericHierarchyView extendedClassGenericHierarchyView) {
        return getClassNameWithPossibleGenericArguments(extendedClass, extendedClassGenericHierarchyView);
    }

    private List<String> mapNamesWithGenericArgumentsIfNecessary(List<JavaClass> implementedInterfaces, Map<JavaClass, GenericHierarchyView> interfaceGenericHierarchyViews) {
        List<String> res = new ArrayList<>();

        for (JavaClass implementedInterface : implementedInterfaces) {
            GenericHierarchyView genericHierarchyView = interfaceGenericHierarchyViews.get(implementedInterface);
            String className = getClassNameWithPossibleGenericArguments(implementedInterface, genericHierarchyView);
            res.add(className);
        }

        return res;
    }

    private String getClassNameWithPossibleGenericArguments(JavaClass classToCheck, GenericHierarchyView classToCheckGenericHierarchyView) {
        GenericParameters initialClassGenericParameters = classToCheckGenericHierarchyView.getInitialClassGenericParameters();
        StringBuilder classNameBuilder = new StringBuilder();
        classNameBuilder.append(BcelNamingUtil.resolveClassName(classToCheck.getClassName()));

        if (initialClassGenericParameters != null) {
            Map<String, String> initialClassGenericParametersMap = initialClassGenericParameters.getGenericParameters();
            int initialClassGenericParametersMapCount = initialClassGenericParametersMap.size();

            if (initialClassGenericParametersMapCount > 0) {
                classNameBuilder.append('<');
                int parameterCounter = 0;
                for (Map.Entry<String, String> genericParameter : initialClassGenericParametersMap.entrySet()) {
                    String resolvedGeneriParameterValue = BcelNamingUtil.resolveClassName(genericParameter.getValue());
                    classNameBuilder.append(resolvedGeneriParameterValue);

                    if (parameterCounter != initialClassGenericParametersMapCount - 1) {
                        classNameBuilder.append(", ");
                        parameterCounter += 1;
                    }
                }
                classNameBuilder.append('>');
            }

        }

        return classNameBuilder.toString();
    }

    private void writeImportsToWriter(Writer writer, JavaClass clazz, String packageName) {
        ImportsWriter importsWriter = new ImportsWriterImpl(writer);

        boolean isApplicationClass = androidClassChecker.isApplicationClass(clazz);
        boolean isServiceClass = androidClassChecker.isServiceClass(clazz);

        if ((isServiceClass || isApplicationClass) && !packageName.equals("com.tns")) {
            importsWriter.writeRuntimeHelperImport();
            importsWriter.writeRuntimeImport();
        }
    }

    private void writePackageNameToWriter(Writer writer, String packageName) {
        PackageNameWriter packageNameWriter = new PackageNameWriterImpl(writer);
        packageNameWriter.writePackageName(packageName);
    }

    private void writeFieldsToWriter(Writer writer, JavaClass clazz) {
        FieldsWriter fieldsWriter = new FieldsWriterImpl(writer);
        boolean isApplicationClass = androidClassChecker.isApplicationClass(clazz);

        if (isApplicationClass) {
            String normalizedClassName = BcelNamingUtil.resolveClassName(clazz.getClassName());
            fieldsWriter.writeStaticThizField(normalizedClassName);
        }
    }

    private void writeConstructorsToWriter(Writer writer, JavaClass clazz, DataRow dataRow, String generatedClassName, GenericHierarchyView genericHierarchyView) {
        boolean isApplicationClass = androidClassChecker.isApplicationClass(clazz);
        boolean isServiceClass = androidClassChecker.isServiceClass(clazz);

        MethodSignatureReifier methodSignatureReifier = new MethodSignatureReifier(genericHierarchyView);
        MethodsWriter methodsWriter = new MethodsWriterImpl(writer, suppressCallJSMethodExceptions, isApplicationClass, isServiceClass);
        ImplementationObjectChecker implementationObjectChecker = new ImplementationObjectCheckerImpl();

        List<String> implObjectMethods = Arrays.asList(dataRow.getMethods());
        boolean hasInitMethod = implementationObjectChecker.hasInitMethod(implObjectMethods);
        boolean hasInitMethod2 = !isApplicationClass && hasInitMethod;

        for (Method method : clazz.getMethods()) {
            if (method.getName().equals("<init>") && (method.isPublic() || method.isProtected())) {
                JavaMethod javaMethod = new JavaMethodImpl(method, clazz);
                ReifiedJavaMethod reifiedJavaMethod = methodSignatureReifier.transformJavaMethod(javaMethod);
                methodsWriter.writeConstructor(generatedClassName, reifiedJavaMethod, hasInitMethod2);
            }
        }
    }

    private void writeMethodsToWriter(Writer writer, GenericHierarchyView genericHierarchyView, Map<JavaClass, GenericHierarchyView> interfaceGenericHierarchyViews, JavaClass clazz, List<String> userImplementedMethods, List<JavaClass> userImplementedInterfaces, String packageName) {
        boolean isApplicationClass = androidClassChecker.isApplicationClass(clazz);
        boolean isServiceClass = androidClassChecker.isServiceClass(clazz);

        MethodsWriter methodsWriter = new MethodsWriterImpl(writer, suppressCallJSMethodExceptions, isApplicationClass, isServiceClass);

        InheritedMethodsCollector inheritedMethodsCollector = new InheritedMethodsCollectorImpl.Builder()
                .forJavaClass(clazz)
                .withClassesCache(classes)
                .withAdditionalImplementedInterfaces(userImplementedInterfaces)
                .withGenericHierarchyView(genericHierarchyView)
                .withInterfacesGenericHierarchyViews(interfaceGenericHierarchyViews)
                .withPackageName(packageName)
                .build();

        InheritedMethodsView inheritedMethodsView = inheritedMethodsCollector.collect();


        for (ReifiedJavaMethod abstractMethod : inheritedMethodsView.getNonImplementedMethods()) {
            writer.writeln();
            writer.writeln();
            methodsWriter.writeMethod(abstractMethod, false);
        }

        List<ReifiedJavaMethod> overridableImplementedMethods = inheritedMethodsView.getOverridableImplementedMethods();

        for (ReifiedJavaMethod overridableMethod : overridableImplementedMethods) {
            for (String userImplementedMethodName : userImplementedMethods) {
                if (overridableMethod.getName().equals(userImplementedMethodName)) {
                    if (areAllArgumentsAndReturnTypePublic(overridableMethod)) {
                        writer.writeln();
                        writer.writeln();
                        boolean isUserImplemented = !overridableMethod.isDeprecated() || !hasNonDeprecatedImplementation(overridableMethod, overridableImplementedMethods);
                        methodsWriter.writeMethod(overridableMethod, isUserImplemented);
                    }
                }
            }
        }

        if (isApplicationClass) {
            String normalizedClassName = BcelNamingUtil.resolveClassName(clazz.getClassName());
            methodsWriter.writeGetInstanceMethod(normalizedClassName);
        }

        if (!hasOverriddenOnCreateMethod(userImplementedMethods) && isServiceClass) {
            methodsWriter.writeInternalServiceOnCreateMethod();
        }

        methodsWriter.writeInternalRuntimeHashCodeMethod();
        methodsWriter.writeInternalRuntimeEqualsMethod();
    }

    /**
     * Checks whether in the list of implemented methods there's another method with the same name which is not deprecated.
     * In that case we'll consider that method as user implemented, but not the current one
     *
     * @private
     * @param {ReifiedJavaMethod} currentMethod The method to check.
     * @param {List<ReifiedJavaMethod>} allOverridableMethods The list will all the overridable methods to check in.
     * @returns {boolean} Returns true or false.
     */
    private boolean hasNonDeprecatedImplementation(ReifiedJavaMethod currentMethod, List<ReifiedJavaMethod> allOverridableMethods) {
        return allOverridableMethods.stream().anyMatch(method ->
                method != currentMethod
                        && method.getName().equals(currentMethod.getName())
                        && !method.isDeprecated());
    }

    private boolean hasOverriddenOnCreateMethod(List<String> overriddenMethods) {
        return overriddenMethods.contains("onCreate");
    }

    private boolean areAllArgumentsAndReturnTypePublic(ReifiedJavaMethod method) {
        String returnType = BcelNamingUtil.resolveClassName(method.getReifiedReturnType());
        if (nonPublicNestedClasses.contains(returnType)) {
            return false;
        }

        JavaClass returnTypeClass = classes.get(returnType);
        if (returnTypeClass != null && (!returnTypeClass.isPublic() && !returnTypeClass.isProtected())) {
            return false;
        }

        List<String> argumentTypes = method.getReifiedArguments();
        for (String argumentType : argumentTypes) {
            argumentType = argumentType.trim();
            int indexOfSpace = argumentType.indexOf(' ');
            String withoutParamName = argumentType.substring(0, indexOfSpace);
            String resolvedName = BcelNamingUtil.resolveClassName(withoutParamName);
            if (nonPublicNestedClasses.contains(resolvedName)) {
                return false;
            }

            JavaClass argumentTypeClass = classes.get(resolvedName);
            if (argumentTypeClass != null && (!argumentTypeClass.isPublic() && !argumentTypeClass.isProtected())) {
                return false;
            }
        }

        return true;
    }

    private List<JavaClass> getInterfacesFromCache(List<String> interfacesNames) {
        List<JavaClass> interfaces = new ArrayList<>(interfacesNames.size());

        for (String interfaceName : interfacesNames) {
            if (interfaceName != null && !interfaceName.equals("")) {
                JavaClass interfaze = getClass(interfaceName);
                interfaces.add(interfaze);
            }
        }

        return interfaces;
    }

    private void writeClassEndToWriter(Writer writer) {
        ClassWriter classWriter = new ClassWriterImpl(writer);
        classWriter.writeClassEnd();
    }

    private JavaClass getClass(String className) {
        JavaClass clazz = classes.get(BcelNamingUtil.resolveClassName(className));

        if (clazz == null) {
            throw new RuntimeException("Class not found " + className);
        }

        return clazz;
    }
}