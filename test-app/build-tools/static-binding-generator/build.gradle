apply plugin: 'java-library'

// todo: check if still needed
// if(!project.hasProperty("loadedProjectDeps")){
//     Properties projectDeps = new Properties()
//     projectDeps.load(new FileInputStream("$project.rootDir/gradle.properties"))
//     projectDeps.each { prop ->
//         project.ext.set(prop.key, prop.value)
//     }
//     project.ext.loadedProjectDeps = true
// }

repositories {
    google()
    mavenCentral()
}

dependencies {
    api "org.ow2.asm:asm:${ns_default_asm_version}"
    api "org.ow2.asm:asm-util:${ns_default_asm_util_version}"
    api "org.apache.bcel:bcel:${ns_default_bcel_version}"
    api group: 'org.json', name: 'json', version: "${ns_default_json_version}"
    api "commons-io:commons-io:${ns_default_commons_io_version}"
    api "com.google.code.gson:gson:${ns_default_gson_version}"
    api "com.google.googlejavaformat:google-java-format:${ns_default_google_java_format_version}"

    testImplementation "com.google.code.gson:gson:${ns_default_gson_version}"
    testImplementation "junit:junit:${ns_default_junit_version}"
    testImplementation "org.mockito:mockito-core:${ns_default_mockito_core_version}"
}

compileJava {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-options" << "-Werror"
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

configurations.create("staticBindingGeneratorTestImplementation") {
    extendsFrom configurations.testImplementation
    setCanBeResolved(true)
}

configurations.create("staticBindingGeneratorImplementation") {
    extendsFrom configurations.implementation
    setCanBeResolved(true)
}

configurations.create("staticBindingGeneratorRuntimeOnly") {
    extendsFrom configurations.runtimeOnly
    setCanBeResolved(true)
}

configurations.create("staticBindingGeneratorApi") {
    extendsFrom configurations.api
    setCanBeResolved(true)
}

jar {

    manifest {
        attributes("Manifest-Version": "2.0",
                "Main-Class": "org.nativescript.staticbindinggenerator.Main")
    }
    from {

        configurations.staticBindingGeneratorTestImplementation.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.staticBindingGeneratorImplementation.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.staticBindingGeneratorRuntimeOnly.collect {
            it.isDirectory() ? it : zipTree(it)
        }

        configurations.staticBindingGeneratorApi.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    duplicatesStrategy = 'include'
}

def copyMetadataFilters = tasks.findByPath(":app:copyMetadataFilters")
if (copyMetadataFilters != null) {
    compileJava.dependsOn(copyMetadataFilters)
    if (processTestResources) {
        processTestResources.dependsOn(copyMetadataFilters)
    }
}
