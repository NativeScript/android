/*
*	Script builds apk in release or debug mode
*	To run:
*			gradle assembleRelease -Prelease (release mode)
*			gradle assembleDebug (debug mode -> default)
* 	Options:
*			-Prelease  //this flag will run build in release mode
*			-PksPath=[path_to_keystore_file]
*			-PksPassword=[password_for_keystore_file]
*			-Palias=[alias_to_use_from_keystore_file]
*			-Ppassword=[password_for_alias]
*
*			-PtargetSdk=[target_sdk]
*			-PbuildToolsVersion=[build_tools_version]
*			-PsupportVersion=[support_version]
*			-PcompileSdk=[compile_sdk_version]

*			-PdontRunSbg=[true/false]
*/

import groovy.json.JsonSlurper

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

apply plugin: "com.android.application"

def metadataParams = new LinkedList <String> ()
def allJarPaths = new LinkedList <String> ()
def configStage = "\tconfig phase: "
def nodeModulesDir = "../../node_modules/"
def dependenciesJson = file("$rootDir/dependencies.json")

// the build script will not work with previous versions of the CLI (3.1 or earlier)
if (!dependenciesJson.exists()) {
	throw new BuildCancelledException("""
'dependencies.json' file not found. Check whether the NativeScript CLI has prepared the project beforehand,
and that your NativeScript version is 3.3, or a more recent one. To build an android project with the current
version of the {N} CLI install a previous version of the runtime package - 'tns platform add android@3.2'.
""")
}

project.ext.extractedDependenciesDir = "${project.buildDir}/exploded-dependencies";
def nativescriptDependencies = new JsonSlurper().parseText(dependenciesJson.text)

def packageJsonContents = [:]

def dontRunSbg = project.hasProperty("dontRunSbg");
def asbgProject = project(":asbg")
asbgProject.ext.outDir = new File("$projectDir", "src/main/java")
asbgProject.ext.jsCodeDir = new File("$projectDir", "src/main/assets/app")

def computeCompileSdkVersion = { -> project.hasProperty("compileSdk") ? compileSdk : 26 }
def computeTargetSdkVersion = { -> project.hasProperty("targetSdk") ? targetSdk : 26 }
def computeBuildToolsVersion = { -> project.hasProperty("buildToolsVersion") ? buildToolsVersion : "26.0.1" }

project.ext.selectedBuildType = project.hasProperty("release") ? "release" : "debug"

def renameResultApks = { variant ->
	def name
	variant.outputs.each { output ->
		def apkDirectory = output.packageApplication.outputFile.parentFile
		def abiName = "";
		if (output.getFilter(com.android.build.OutputFile.ABI)) {
			abiName = "-" + output.getFilter(com.android.build.OutputFile.ABI);
		}
		def apkNamePrefix = rootProject.name + "-" + variant.buildType.name + abiName
		name = apkNamePrefix + ".apk"
		output.packageApplication.outputFile = new File(apkDirectory, name);
	}
}

////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// CONFIGURATIONS ///////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

def applyPluginsIncludeGradleConfigurations =  { ->
	def taskNames = project.getGradle().startParameter.taskNames

	// don't apply plugin configurations if clean is invoked
	if (taskNames && taskNames.size() > 0 && taskNames.getAt(0).equals("clean")) {
		return []
	}

	def configurationsDir = new File(projectDir, "build/configurations")
	configurationsDir.deleteDir()

	def dimensions = []
	def includes = new ArrayList<String>()
	def flavorNumber = 0

	nativescriptDependencies.each { dep ->
		def androidDir = file("$rootDir/${dep.directory}/platforms/android")
		if (!androidDir.exists()) {
			return
		}

		FileTree allFilesExceptForAars = fileTree(dir: androidDir, exclude: "**/*.aar");
		if(allFilesExceptForAars.size() <= 0) {
			return;
		}

		def includeGradleFile = new File(androidDir, "include.gradle")

		def packageJsonPath = file("$rootDir/${dep.directory}/package.json")
		def packageJson = new JsonSlurper().parseText(packageJsonPath.text)
		def pluginName = packageJson.name
		def dimensionName = sanitizeDimensionName(pluginName)

		dimensions.add(dimensionName)
		def flavor = "F${flavorNumber++}"

		def destinationDir = file("${configurationsDir}/${pluginName}/")
		def destinationIncludeGradleFile = file("${configurationsDir}/${pluginName}/include.gradle")

		Files.createDirectories(Paths.get(destinationDir.getAbsolutePath()))

		if (includeGradleFile.exists()) {
			println "\t + add include.gradle from ${includeGradleFile}"
			destinationIncludeGradleFile.text = modifyProductFlavorInContent(includeGradleFile.text, dimensionName, flavor)
		} else {
			println "\t + creating include.gradle for plugin ${file(dep.directory)}"
			destinationIncludeGradleFile.text = createProductFlavorsContent(flavor, dimensionName)
		}

		includes.add(destinationIncludeGradleFile.getAbsolutePath());

		copyAndRenamePluginDirToFlavorName(androidDir, flavor);
	}

	includes.each {
		println "\t + applying plugin configuration from ${it}"
		apply from: it
	}

	return dimensions
}

def applyAppGradleConfiguration = { ->
	def pathToAppGradle = "$rootDir/../../app/App_Resources/Android/app.gradle"
	def appGradle = file(pathToAppGradle)
	if (appGradle.exists()) {
		println "\t + applying user-defined configuration from ${appGradle}"
		apply from: pathToAppGradle
	} else {
		println "\t + couldn't load user-defined configuration from ${appGradle}. File doesn't exist."
	}
}

android {
	compileSdkVersion computeCompileSdkVersion()
	buildToolsVersion computeBuildToolsVersion()

	defaultConfig {
		minSdkVersion 17
		targetSdkVersion computeTargetSdkVersion()
		ndk {
			abiFilters "armeabi-v7a", "x86"
		}
	}

	sourceSets.main {
		jniLibs.srcDir "$projectDir/libs/jni"
	}

	signingConfigs {
		release {
			if (project.hasProperty("release")) {
				if (project.hasProperty("ksPath") &&
						project.hasProperty("ksPassword") &&
						project.hasProperty("alias") &&
						project.hasProperty("password")) {

					storeFile file(ksPath)
					storePassword ksPassword
					keyAlias alias
					keyPassword password
				}
			}
		}
	}
	buildTypes {
		release {
			signingConfig signingConfigs.release
		}
	}

	applicationVariants.all { variant ->
		renameResultApks(variant)
	}

	applyAppGradleConfiguration()

	def dimensions = applyPluginsIncludeGradleConfigurations()

	flavorDimensions(*dimensions)
}

def externalRuntimeExists = !findProject(':runtime').is(null)

repositories {

	// used for local *.AAR files
	def pluginDependencies = nativescriptDependencies.collect { "$rootDir/${it.directory}/platforms/android" }
	if(!externalRuntimeExists) {
		pluginDependencies.add("libs/runtime-libs")
	}

	flatDir {
		dirs pluginDependencies
	}
}

dependencies {
	def supportVer = "25.3.1"
	if (project.hasProperty("supportVersion")) {
		supportVer = supportVersion
	}

	compile "com.android.support:support-v4:$supportVer"
	compile "com.android.support:appcompat-v7:$supportVer"
	debugCompile "com.android.support:design:$supportVer"
}

////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// CONFIGURATION PHASE //////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

task addNativeScriptRuntimePackageDependency {
	def useV8Symbols = nativescriptDependencies.any {
		def packageJsonPath = file("$rootDir/${it.directory}/package.json");
		def packageJson = new JsonSlurper().parseText(packageJsonPath.text);
		return packageJson.nativescript.useV8Symbols;
	}

	if(!externalRuntimeExists) {
		def runtime = useV8Symbols ? "nativescript-regular" : "nativescript-optimized";
		println "\t + adding nativescript runtime package dependency: $runtime"
		project.dependencies.add("compile", [name: runtime, ext: "aar"])
	} else {
		project.dependencies.add("compile", project(':runtime'))
	}
}

task addDependenciesFromNativeScriptPlugins {
	nativescriptDependencies.each { dep ->
		def aarFiles = fileTree(dir: file("$rootDir/${dep.directory}/platforms/android"), include: ["**/*.aar"])
		aarFiles.each { aarFile ->
			def length = aarFile.name.length() - 4
			def fileName = aarFile.name[0..<length]
			println "\t + adding aar plugin dependency: " + aarFile.getAbsolutePath()
			project.dependencies.add("compile", [name: fileName, ext: "aar"])
		}

		def jarFiles = fileTree(dir: file("${dep.directory}/platforms/android"), include: ["**/*.jar"])
		jarFiles.each { jarFile ->
			println "\t + adding jar plugin dependency: " + jarFile.getAbsolutePath()
		}

		project.dependencies.add("compile", jarFiles)
	}
}

static def updateProductFlavorsContent(flavor, dimensionName, oldContent) {
	def endIndex = oldContent.length() - 1;
	def index = 0;
	def newContent = "";
	def level = -1;
	def dimensionFound = false;

	while(index <= endIndex) {
		if (level == 0 && (oldContent[index] == '"' || oldContent[index] == "'")) {
			def closingQuotes = oldContent.indexOf('"', index + 1);
			if (closingQuotes == -1) {
				closingQuotes = oldContent.indexOf("'", index + 1);
			}

			index = closingQuotes + 1;
			newContent += "\"${flavor}\"";
			continue;
		}

		if (oldContent[index] == "{") {
			level++;
		}

		if (oldContent[index] == "}") {
			level--;
		}

		if (level > 0) {
			if (!dimensionFound && oldContent.indexOf("dimension", index) == index) {
				newContent += "dimension \"${dimensionName}\"";
				dimensionFound = true;
				index += "dimension ".length();
				def openingQuoutes = oldContent.indexOf('"', index);
				if (openingQuoutes == -1) {
					openingQuoutes = oldContent.indexOf("'", index);
				}

				def closingQuotes = oldContent.indexOf('"', openingQuoutes + 1);
				if (closingQuotes == -1) {
					closingQuotes = oldContent.indexOf("'", openingQuoutes + 1);
				}

				index = closingQuotes + 1;
			}
		}

		newContent += oldContent[index];

		index++;
	}

	return newContent;
}

static def createProductFlavorsContent(flavor, dimensionName, includeAndroidContent = true) {
	if (includeAndroidContent)
	{
		def content = """
android {
    productFlavors {
        "${flavor}" {
            dimension "${dimensionName}"
        }
    }
}
"""
		return content;
	}
	else
	{
		def content = """
    productFlavors {
        "${flavor}" {
            dimension "${dimensionName}"
        }
    }
"""
		return content;
	}
}

static def sanitizeDimensionName(str) {
	return str.replaceAll(/\W/, "")
}

static def modifyProductFlavorInContent(content, dimension, flavor) {
	def indexStart = content.indexOf("productFlavors");
	def index = indexStart  + "productFlavors".length();
	def indexEnd = -1;
	def nestedOpenBracketsCount = 0;

	while (index < content.length())
	{
		// print content[index];
		if (content[index] == "}")
		{
			nestedOpenBracketsCount--;

			if (nestedOpenBracketsCount == 0)
			{
				indexEnd = index;
				break;
			}
		}
		else if (content[index] == "{")
		{
			nestedOpenBracketsCount++;
		}

		index++;
	}

	if (indexEnd != -1)
	{
		// full content of productFlavors { ... } -> the substring is parenthesis to parenthesis -> { ... }
		def oldProductFlavorsText = content.substring(indexStart, indexEnd + 1);

		def newProductFlavorsContent = updateProductFlavorsContent(flavor, dimension, oldProductFlavorsText);

		return content.replace(oldProductFlavorsText, newProductFlavorsContent);
	}
	else
	{
		def androidContentExists = content.indexOf("android {") != -1;
		def newProductFlavorsContent = createProductFlavorsContent(flavor, dimension, !androidContentExists);

		if (androidContentExists)
		{
			return content.replace("android {", "android { ${newProductFlavorsContent}");
		}
		else
		{
			return "${newProductFlavorsContent} \t ${content}"
		}
	}
}

def copyFolder(source, destination) {
	if (source.isDirectory()) {
		Files.createDirectories(destination.toPath());

		def sourceFiles = source.list();

		sourceFiles.each { file ->
			def srcFile = new File(source, file);
			def destFile = new File(destination, file);

			//Recursive function call
			copyFolder(srcFile, destFile);
		}
	}
	else {
		// Copy the file content from one place to another
		def fileName = source.getName()
		def extension = fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0 ? fileName.substring(fileName.lastIndexOf(".") + 1) : "";
		// exclude aars from package, as we've already included it in the compile dependencies, and don't want it taking up space
		if (extension == "aar") {
			return
		}

		Files.copy(source.toPath(), destination.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
	}
}

def copyAndRenamePluginDirToFlavorName(directory, flavor) {
	def targetDir = file("src/${flavor}")

	copyFolder(directory, targetDir)
}

task ensureMetadataOutDir {
	doLast {
		def outputDir = file("$projectDir/metadata/output/assets/metadata")
		outputDir.mkdirs()
	}
}

////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// EXECUTUION PHASE /////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

tasks.whenTaskAdded({ org.gradle.api.DefaultTask currentTask ->
	if(currentTask =~ /generate.+BuildConfig/ ) {
		currentTask.finalizedBy(extractAllJars)
		extractAllJars.finalizedBy(collectAllJars)
		collectAllJars.finalizedBy(setProperties)
	}
	if(currentTask =~ /compile.+JavaWithJavac/ ) {
		currentTask.dependsOn(":asbg:generateBindings")
		currentTask.finalizedBy(ensureMetadataOutDir)
		ensureMetadataOutDir.finalizedBy(buildMetadata)
	}
	if(currentTask.equals("assembleDebug") || currentTask.equals("assembleRelease")) {
		currentTask.finalizedBy("validateAppIdMatch");
	}
})

def explodeAar (File compileDependency, String outputDir) {
	if(compileDependency.name.endsWith(".aar")) {
		JarFile jar = new JarFile(compileDependency)
		Enumeration enumEntries = jar.entries()
		while (enumEntries.hasMoreElements()) {
			JarEntry file = (JarEntry) enumEntries.nextElement();
			if(file.name.endsWith(".jar")) {
				def f = new File(outputDir , file.name);
				new File(f.parent).mkdirs();
				InputStream is = jar.getInputStream(file);
				FileOutputStream fos = new FileOutputStream(f);
				while (is.available() > 0) {
					fos.write(is.read())
				}
				fos.close()
				is.close()
			}
			if (file.isDirectory()) {
				continue
			}
		}
		jar.close()
	}
	else if(compileDependency.name.endsWith(".jar")) {
		copy {
			from compileDependency.absolutePath
			into outputDir
		}
	}
}

task extractAllJars {

	outputs.dir extractedDependenciesDir

	doLast {
		def iter = configurations.compile.resolvedConfiguration.resolvedArtifacts.iterator()
		def dependencyCounter = 0;
		while(iter.hasNext()) {
			//declaring variable as specific class for getting code completion in Android Studio
			org.gradle.api.internal.artifacts.DefaultResolvedArtifact nextDependency = iter.next();

			def outputDir = java.nio.file.Paths.get(extractedDependenciesDir, ""+dependencyCounter).normalize().toString();
			explodeAar(nextDependency.file, outputDir)
			dependencyCounter++;
		}
	}
}

task collectAllJars {
	description "gathers all paths to jar dependencies before building metadata with them"

	def sdkPath = android.sdkDirectory.getAbsolutePath();
	def androidJar = sdkPath + "/platforms/" + android.compileSdkVersion + "/android.jar"

	doFirst {
		configurations.compile.each { File dependencyFile ->
			logger.info("Task: collectAllJars: dependency file: " + dependencyFile.getAbsolutePath())
			allJarPaths.add(dependencyFile.getAbsolutePath())
		}

		allJarPaths.add(androidJar);

		def ft = fileTree(dir: extractedDependenciesDir, include: "**/*.jar")
		ft.each { currentJarFile ->
			allJarPaths.add(currentJarFile.getAbsolutePath())
		}

		metadataParams.add("metadata-generator.jar");
		metadataParams.add("$projectDir/metadata/output/assets/metadata");
		def jars = new LinkedList<File>()
		for (def i = 0; i < allJarPaths.size(); i++) {
			metadataParams.add(allJarPaths.get(i));
			def f = new File(allJarPaths.get(i))
			if (f.getName().endsWith(".jar")) {
				jars.add(f)
			}
		}

		asbgProject.ext.jarFiles = jars
	}
}

task buildMetadata (type: JavaExec) {
	description "builds metadata with provided jar dependencies"

	inputs.files(allJarPaths)
	inputs.dir("$buildDir/intermediates/classes")

	outputs.files("metadata/output/assets/metadata/treeNodeStream.dat", "metadata/output/assets/metadata/treeStringsStream.dat", "metadata/output/assets/metadata/treeValueStream.dat")

	doFirst {
		// get compiled classes to pass to metadata generator
		// these need to be called after the classes have compiled
		def classesDir = "$buildDir/intermediates/classes"

		def classesSubDirs = new File(classesDir).listFiles()
		def selectedBuildType = project.ext.selectedBuildType

		for (File subDir: classesSubDirs) {
			if (!subDir.getName().equals(selectedBuildType)) {
				def subDirBuildType = new File(subDir, selectedBuildType)
				if (subDirBuildType.exists()) {
					metadataParams.add(subDirBuildType.getAbsolutePath());
				}
			}
		}

		def classesDirBuildType = new File(classesDir, selectedBuildType)
		if (classesDirBuildType.exists()) {
			metadataParams.add(classesDirBuildType.getAbsolutePath())
		}

		workingDir "$rootDir/build-tools"
		main "-jar"

		logger.info("Task buildMetadata: Call metadata-generator.jar with arguments: " + metadataParams.toString().replaceAll(',', ''))
		args metadataParams.toArray()
	}

	doLast {
		copy {
			from "$projectDir/metadata/output/assets/metadata"
			into "$projectDir/src/main/assets/metadata"
		}
	}
}

task generateTypescriptDefinitions (type: JavaExec) {
	def paramz = new ArrayList<String>();
	def includeDirs = ["com.android.support", "/platforms/" + android.compileSdkVersion]

	doFirst {
		delete "$rootDir/build-tools/typings"

		workingDir "$rootDir/build-tools"

		main "-jar"

		paramz.add("dts-generator.jar");
		paramz.add("-input");

		for (String jarPath: project.jarFiles) {
			// don't generate typings for runtime jars and classes
			if (shouldIncludeDirForTypings(jarPath, includeDirs)) {
				paramz.add(jarPath);
			}
		}

		paramz.add("-output");
		paramz.add("typings");

		logger.info("Task generateTypescriptDefinitions: Call dts-generator.jar with arguments: " + paramz.toString().replaceAll(',', ''))
		args paramz.toArray();
	}
}

generateTypescriptDefinitions.onlyIf {
	project.hasProperty("generateTypings") && Boolean.parseBoolean(project.generateTypings)
}

static def shouldIncludeDirForTypings(path, includeDirs) {
	for (String p: includeDirs) {
		if (path.indexOf(p) > -1) {
			return true;
		}
	}

	return false;
}

task copyTypings {
	doLast {
		println "Copied generated typings to application root level. Make sure to import android.d.ts in reference.d.ts"

		copy {
			from "$rootDir/build-tools/typings"
			into "$rootDir/../../"
		}
	}
}

copyTypings.onlyIf { generateTypescriptDefinitions.didWork }

task validateAppIdMatch {
	doLast {
		def packageJsonFile = new File("$rootDir/../../package.json");
		def lineSeparator = System.getProperty("line.separator");

		if (packageJsonFile.exists() && !project.hasProperty("release")) {
			String content = packageJsonFile.getText("UTF-8")
			def jsonSlurper = new JsonSlurper()
			def packageJsonMap = jsonSlurper.parseText(content)

			if (packageJsonMap.nativescript.id != android.defaultConfig.applicationId) {
				def errorMessage = "${lineSeparator}WARNING: The Application identifier is different from the one inside 'package.json' file.$lineSeparator" +
						"NativeScript CLI might not work properly.$lineSeparator" +
						"Update the application identifier in package.json and app.gradle so that they match.";
				logger.error(errorMessage);
			}
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////// OPTIONAL TASKS //////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

task setProperties {
	project.ext.jarFiles = []
	doLast {
		def list = [];
		allJarPaths.each({f ->
			if(f.endsWith(".jar")) {
				list.add(f);
			}
		})
		project.jarFiles = list;
	}
}

//////// custom clean ///////////
task deleteMetadata (type: Delete){
	delete "$projectDir/metadata/output", "$projectDir/src/main/assets/metadata"
}

task deleteFlavors (type: Delete){
	doLast {
		def srcDir = new File("$projectDir/src")
		srcDir.listFiles().each({ f ->
			def dirName = f.getName()
			if (dirName != "main" &&
					dirName != "debug" &&
					dirName != "release")	{
				delete f
			}
		})
	}
}

task deleteGeneratedBindings(type: Delete) {
	delete "$projectDir/src/main/java/com/tns/gen"
}

deleteMetadata.dependsOn(":asbg:clean")
deleteFlavors.dependsOn(deleteMetadata)
deleteGeneratedBindings.dependsOn(deleteFlavors)
clean.dependsOn(deleteGeneratedBindings)
